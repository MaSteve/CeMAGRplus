
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cemagr.parser;

import cemagr.Nodes.*;
import cemagr.Application;
import cemagr.Manager;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.List;
import cemagr.Nodes.ControlStructures.*;
import cemagr.Nodes.Expressions.*;
import cemagr.Nodes.Variables.*;
import cemagr.Nodes.Functions.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\004\000\002\006\006\000\002\006" +
    "\004\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\007\006\000\002\024\005\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\005\000\002\026\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\030\005\000\002\030\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\032" +
    "\004\000\002\032\003\000\002\033\003\000\002\033\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\005\000\002\034\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\004\000\002\037" +
    "\003\000\002\037\004\000\002\037\004\000\002\046\005" +
    "\000\002\046\003\000\002\041\004\000\002\041\003\000" +
    "\002\040\005\000\002\045\005\000\002\045\003\000\002" +
    "\044\005\000\002\044\004\000\002\044\005\000\002\042" +
    "\004\000\002\042\003\000\002\043\005\000\002\010\011" +
    "\000\002\010\015\000\002\011\011\000\002\012\014\000" +
    "\002\013\012\000\002\014\004\000\002\014\003\000\002" +
    "\015\006\000\002\016\005\000\002\017\006\000\002\017" +
    "\005\000\002\020\005\000\002\022\012\000\002\022\011" +
    "\000\002\023\013\000\002\023\012\000\002\021\006\000" +
    "\002\021\005\000\002\021\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\010\046\010\054\012\055\011\001\002\000" +
    "\012\002\uffef\046\uffef\054\uffef\055\uffef\001\002\000\012" +
    "\002\001\046\010\054\012\055\011\001\002\000\004\002" +
    "\271\001\002\000\012\002\ufff0\046\ufff0\054\ufff0\055\ufff0" +
    "\001\002\000\004\055\255\001\002\000\004\012\020\001" +
    "\002\000\004\055\015\001\002\000\012\002\ufff1\046\ufff1" +
    "\054\ufff1\055\ufff1\001\002\000\012\002\ufffe\046\ufffe\054" +
    "\ufffe\055\ufffe\001\002\000\004\012\016\001\002\000\004" +
    "\004\017\001\002\000\062\002\uffa9\003\uffa9\006\uffa9\012" +
    "\uffa9\022\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\037\uffa9\040\uffa9\041\uffa9\043\uffa9\044\uffa9\046" +
    "\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\001\002\000\010\004\023\030\022\034\024\001" +
    "\002\000\012\004\uffbd\027\uffbd\034\uffbd\035\uffbd\001\002" +
    "\000\010\027\033\054\034\055\036\001\002\000\062\002" +
    "\uffaa\003\uffaa\006\uffaa\012\uffaa\022\uffaa\025\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\037\uffaa\040\uffaa\041" +
    "\uffaa\043\uffaa\044\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa" +
    "\052\uffaa\053\uffaa\054\uffaa\055\uffaa\001\002\000\004\022" +
    "\030\001\002\000\006\004\027\034\024\001\002\000\012" +
    "\004\uffbe\027\uffbe\034\uffbe\035\uffbe\001\002\000\062\002" +
    "\uffab\003\uffab\006\uffab\012\uffab\022\uffab\025\uffab\026\uffab" +
    "\027\uffab\030\uffab\031\uffab\032\uffab\037\uffab\040\uffab\041" +
    "\uffab\043\uffab\044\uffab\046\uffab\047\uffab\050\uffab\051\uffab" +
    "\052\uffab\053\uffab\054\uffab\055\uffab\001\002\000\004\033" +
    "\031\001\002\000\012\004\uffbc\027\uffbc\034\uffbc\035\uffbc" +
    "\001\002\000\006\027\250\035\247\001\002\000\004\032" +
    "\043\001\002\000\004\055\041\001\002\000\006\027\uffc2" +
    "\035\uffc2\001\002\000\004\012\037\001\002\000\010\027" +
    "\uffc0\034\024\035\uffc0\001\002\000\010\027\uffc1\034\024" +
    "\035\uffc1\001\002\000\004\012\042\001\002\000\006\027" +
    "\uffbf\035\uffbf\001\002\000\030\003\061\012\055\032\057" +
    "\040\046\041\054\043\047\044\051\047\050\051\052\054" +
    "\012\055\060\001\002\000\056\003\ufff5\006\ufff5\012\ufff5" +
    "\022\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\037\ufff5\040\ufff5\041\ufff5\043\ufff5\044\ufff5\047\ufff5" +
    "\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\001" +
    "\002\000\056\003\ufffc\006\ufffc\012\ufffc\022\ufffc\025\ufffc" +
    "\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\037\ufffc\040" +
    "\ufffc\041\ufffc\043\ufffc\044\ufffc\047\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\053\ufffc\054\ufffc\055\ufffc\001\002\000\004\012" +
    "\246\001\002\000\004\030\240\001\002\000\024\006\105" +
    "\012\077\022\102\025\073\026\106\030\072\037\107\040" +
    "\046\050\104\001\002\000\004\030\224\001\002\000\004" +
    "\030\201\001\002\000\056\003\ufff8\006\ufff8\012\ufff8\022" +
    "\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\037\ufff8\040\ufff8\041\ufff8\043\ufff8\044\ufff8\047\ufff8\050" +
    "\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\001\002" +
    "\000\004\030\167\001\002\000\006\013\uffcb\034\142\001" +
    "\002\000\056\003\ufffb\006\ufffb\012\ufffb\022\ufffb\025\ufffb" +
    "\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\037\ufffb\040" +
    "\ufffb\041\ufffb\043\ufffb\044\ufffb\047\ufffb\050\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\054\ufffb\055\ufffb\001\002\000\004\003" +
    "\166\001\002\000\004\012\165\001\002\000\006\004\161" +
    "\032\162\001\002\000\056\003\ufff9\006\ufff9\012\ufff9\022" +
    "\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9" +
    "\037\ufff9\040\ufff9\041\ufff9\043\ufff9\044\ufff9\047\ufff9\050" +
    "\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\001\002" +
    "\000\032\003\061\012\055\031\160\032\057\040\046\041" +
    "\054\043\047\044\051\047\050\051\052\054\012\055\060" +
    "\001\002\000\056\003\ufff6\006\ufff6\012\ufff6\022\ufff6\025" +
    "\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\037\ufff6" +
    "\040\ufff6\041\ufff6\043\ufff6\044\ufff6\047\ufff6\050\ufff6\051" +
    "\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\001\002\000\056" +
    "\003\ufff7\006\ufff7\012\ufff7\022\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\031\ufff7\032\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\043\ufff7\044\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053" +
    "\ufff7\054\ufff7\055\ufff7\001\002\000\004\013\070\001\002" +
    "\000\056\003\ufffa\006\ufffa\012\ufffa\022\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\043\ufffa\044\ufffa\047\ufffa\050\ufffa\051\ufffa\052" +
    "\ufffa\053\ufffa\054\ufffa\055\ufffa\001\002\000\024\006\105" +
    "\012\077\022\102\025\073\026\106\030\072\037\107\040" +
    "\046\050\104\001\002\000\044\004\uffd0\005\uffd0\006\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\023\uffd0\024\uffd0\027\uffd0\033\uffd0" +
    "\035\uffd0\001\002\000\024\006\105\012\077\022\102\025" +
    "\073\026\106\030\072\037\107\040\046\050\104\001\002" +
    "\000\020\006\uffd6\012\uffd6\022\uffd6\025\uffd6\026\uffd6\030" +
    "\uffd6\040\uffd6\001\002\000\044\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\011\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7\027\uffd7\033\uffd7" +
    "\035\uffd7\001\002\000\010\004\uffea\027\uffea\035\uffea\001" +
    "\002\000\044\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\023\uffdd\024\uffdd\027\uffdd\033\uffdd\035\uffdd\001\002" +
    "\000\052\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\023\uffcb\024\uffcb\027\uffcb\030\140\033\uffcb\034" +
    "\142\035\uffcb\001\002\000\044\004\uffe2\005\uffe2\006\uffe2" +
    "\007\136\010\135\011\132\014\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\023\134\024\uffe2\027\uffe2\033\uffe2" +
    "\035\uffe2\001\002\000\032\004\uffec\005\122\006\115\014" +
    "\123\015\121\016\125\017\120\020\126\021\124\024\127" +
    "\027\uffec\035\uffec\001\002\000\044\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\023\uffd3\024\uffd3\027\uffd3\033" +
    "\uffd3\035\uffd3\001\002\000\004\004\114\001\002\000\010" +
    "\004\uffeb\027\uffeb\035\uffeb\001\002\000\020\006\uffd5\012" +
    "\uffd5\022\uffd5\025\uffd5\026\uffd5\030\uffd5\040\uffd5\001\002" +
    "\000\044\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\023\uffd2\024\uffd2\027\uffd2\033\uffd2\035\uffd2\001\002\000" +
    "\004\012\113\001\002\000\020\006\105\012\077\022\102" +
    "\025\073\026\106\030\072\040\046\001\002\000\044\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\023\uffd4\024" +
    "\uffd4\027\uffd4\033\uffd4\035\uffd4\001\002\000\044\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\023\uffd8\024\uffd8" +
    "\027\uffd8\033\uffd8\035\uffd8\001\002\000\010\004\uffcc\027" +
    "\uffcc\035\uffcc\001\002\000\056\003\uffee\006\uffee\012\uffee" +
    "\022\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\037\uffee\040\uffee\041\uffee\043\uffee\044\uffee\047\uffee" +
    "\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\001" +
    "\002\000\020\006\uffe0\012\uffe0\022\uffe0\025\uffe0\026\uffe0" +
    "\030\uffe0\040\uffe0\001\002\000\020\006\105\012\077\022" +
    "\102\025\073\026\106\030\072\040\046\001\002\000\020" +
    "\006\105\012\077\022\102\025\073\026\106\030\072\040" +
    "\046\001\002\000\020\006\uffe6\012\uffe6\022\uffe6\025\uffe6" +
    "\026\uffe6\030\uffe6\040\uffe6\001\002\000\020\006\uffe8\012" +
    "\uffe8\022\uffe8\025\uffe8\026\uffe8\030\uffe8\040\uffe8\001\002" +
    "\000\020\006\uffe1\012\uffe1\022\uffe1\025\uffe1\026\uffe1\030" +
    "\uffe1\040\uffe1\001\002\000\020\006\uffe9\012\uffe9\022\uffe9" +
    "\025\uffe9\026\uffe9\030\uffe9\040\uffe9\001\002\000\020\006" +
    "\uffe4\012\uffe4\022\uffe4\025\uffe4\026\uffe4\030\uffe4\040\uffe4" +
    "\001\002\000\020\006\uffe7\012\uffe7\022\uffe7\025\uffe7\026" +
    "\uffe7\030\uffe7\040\uffe7\001\002\000\020\006\uffe5\012\uffe5" +
    "\022\uffe5\025\uffe5\026\uffe5\030\uffe5\040\uffe5\001\002\000" +
    "\020\006\uffdf\012\uffdf\022\uffdf\025\uffdf\026\uffdf\030\uffdf" +
    "\040\uffdf\001\002\000\016\004\uffed\005\122\006\115\024" +
    "\127\027\uffed\035\uffed\001\002\000\044\004\uffe3\005\uffe3" +
    "\006\uffe3\007\136\010\135\011\132\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\023\134\024\uffe3\027\uffe3" +
    "\033\uffe3\035\uffe3\001\002\000\020\006\uffda\012\uffda\022" +
    "\uffda\025\uffda\026\uffda\030\uffda\040\uffda\001\002\000\020" +
    "\006\105\012\077\022\102\025\073\026\106\030\072\040" +
    "\046\001\002\000\020\006\uffd9\012\uffd9\022\uffd9\025\uffd9" +
    "\026\uffd9\030\uffd9\040\uffd9\001\002\000\020\006\uffdb\012" +
    "\uffdb\022\uffdb\025\uffdb\026\uffdb\030\uffdb\040\uffdb\001\002" +
    "\000\020\006\uffdc\012\uffdc\022\uffdc\025\uffdc\026\uffdc\030" +
    "\uffdc\040\uffdc\001\002\000\044\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\010\uffde\011\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\023\uffde\024\uffde\027\uffde\033\uffde" +
    "\035\uffde\001\002\000\026\006\105\012\077\022\102\025" +
    "\073\026\106\027\147\030\072\037\107\040\046\050\104" +
    "\001\002\000\050\004\uffca\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\023\uffca\024\uffca\027\uffca\033\uffca\034" +
    "\142\035\uffca\001\002\000\020\006\105\012\077\022\102" +
    "\025\073\026\106\030\072\040\046\001\002\000\050\004" +
    "\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\013\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\023" +
    "\uffc5\024\uffc5\027\uffc5\033\uffc5\034\uffc5\035\uffc5\001\002" +
    "\000\012\005\122\006\115\024\127\033\145\001\002\000" +
    "\050\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\023\uffc4\024\uffc4\027\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\001\002\000\050\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\023\uffc6\024\uffc6\027\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\001\002\000\044\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\011\uffb1\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\023\uffb1\024\uffb1\027\uffb1\033\uffb1" +
    "\035\uffb1\001\002\000\006\027\uffc7\035\uffc7\001\002\000" +
    "\006\027\153\035\152\001\002\000\024\006\105\012\077" +
    "\022\102\025\073\026\106\030\072\037\107\040\046\050" +
    "\104\001\002\000\044\004\uffb2\005\uffb2\006\uffb2\007\uffb2" +
    "\010\uffb2\011\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\023\uffb2\024\uffb2\027\uffb2\033\uffb2\035\uffb2" +
    "\001\002\000\006\027\uffc8\035\uffc8\001\002\000\004\027" +
    "\156\001\002\000\044\004\uffd1\005\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\023\uffd1\024\uffd1\027\uffd1\033\uffd1\035\uffd1" +
    "\001\002\000\056\003\ufffd\006\ufffd\012\ufffd\022\ufffd\025" +
    "\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\037\ufffd" +
    "\040\ufffd\041\ufffd\043\ufffd\044\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\001\002\000\012" +
    "\002\uffae\046\uffae\054\uffae\055\uffae\001\002\000\056\003" +
    "\ufff4\006\ufff4\012\ufff4\022\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\037\ufff4\040\ufff4\041\ufff4\043" +
    "\ufff4\044\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\054\ufff4\055\ufff4\001\002\000\030\003\061\012\055\032" +
    "\057\040\046\041\054\043\047\044\051\047\050\051\052" +
    "\054\012\055\060\001\002\000\032\003\061\012\055\031" +
    "\164\032\057\040\046\041\054\043\047\044\051\047\050" +
    "\051\052\054\012\055\060\001\002\000\056\003\ufff3\006" +
    "\ufff3\012\ufff3\022\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3" +
    "\031\ufff3\032\ufff3\037\ufff3\040\ufff3\041\ufff3\043\ufff3\044" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3" +
    "\055\ufff3\001\002\000\006\004\023\034\024\001\002\000" +
    "\056\003\ufff2\006\ufff2\012\ufff2\022\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\032\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\043\ufff2\044\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\054\ufff2\055\ufff2\001\002\000\024\006\105\012" +
    "\077\022\102\025\073\026\106\030\072\037\107\040\046" +
    "\050\104\001\002\000\004\027\171\001\002\000\004\032" +
    "\172\001\002\000\030\003\061\012\055\032\057\040\046" +
    "\041\054\043\047\044\051\047\050\051\052\054\012\055" +
    "\060\001\002\000\032\003\061\012\055\031\174\032\057" +
    "\040\046\041\054\043\047\044\051\047\050\051\052\054" +
    "\012\055\060\001\002\000\060\003\uffbb\006\uffbb\012\uffbb" +
    "\022\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\042\175\043\uffbb\044\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\001\002\000\004\032\176\001\002\000\030\003\061" +
    "\012\055\032\057\040\046\041\054\043\047\044\051\047" +
    "\050\051\052\054\012\055\060\001\002\000\032\003\061" +
    "\012\055\031\200\032\057\040\046\041\054\043\047\044" +
    "\051\047\050\051\052\054\012\055\060\001\002\000\056" +
    "\003\uffba\006\uffba\012\uffba\022\uffba\025\uffba\026\uffba\027" +
    "\uffba\030\uffba\031\uffba\032\uffba\037\uffba\040\uffba\041\uffba" +
    "\043\uffba\044\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053" +
    "\uffba\054\uffba\055\uffba\001\002\000\024\006\105\012\077" +
    "\022\102\025\073\026\106\030\072\037\107\040\046\050" +
    "\104\001\002\000\004\027\203\001\002\000\004\032\204" +
    "\001\002\000\004\052\207\001\002\000\006\052\207\053" +
    "\220\001\002\000\006\052\uffb5\053\uffb5\001\002\000\010" +
    "\022\210\026\212\050\211\001\002\000\004\036\uffcf\001" +
    "\002\000\004\036\uffcd\001\002\000\004\036\uffce\001\002" +
    "\000\004\036\214\001\002\000\030\003\061\012\055\032" +
    "\057\040\046\041\054\043\047\044\051\047\050\051\052" +
    "\054\012\055\060\001\002\000\034\003\061\012\055\032" +
    "\057\040\046\041\054\043\047\044\051\047\050\051\052" +
    "\052\uffb4\053\uffb4\054\012\055\060\001\002\000\004\031" +
    "\223\001\002\000\006\052\uffb6\053\uffb6\001\002\000\004" +
    "\036\221\001\002\000\030\003\061\012\055\032\057\040" +
    "\046\041\054\043\047\044\051\047\050\051\052\054\012" +
    "\055\060\001\002\000\032\003\061\012\055\031\uffb3\032" +
    "\057\040\046\041\054\043\047\044\051\047\050\051\052" +
    "\054\012\055\060\001\002\000\056\003\uffb7\006\uffb7\012" +
    "\uffb7\022\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\037\uffb7\040\uffb7\041\uffb7\043\uffb7\044\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7" +
    "\001\002\000\030\003\061\012\055\032\057\040\046\041" +
    "\054\043\047\044\051\047\050\051\052\054\012\055\060" +
    "\001\002\000\046\003\061\006\105\012\077\022\102\025" +
    "\073\026\106\030\072\032\057\037\107\040\046\041\054" +
    "\043\047\044\051\047\050\050\104\051\052\054\012\055" +
    "\060\001\002\000\004\004\230\001\002\000\040\004\uffd4" +
    "\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\013\070\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\023\uffd4" +
    "\024\uffd4\001\002\000\030\003\061\012\055\032\057\040" +
    "\046\041\054\043\047\044\051\047\050\051\052\054\012" +
    "\055\060\001\002\000\032\003\061\012\055\027\232\032" +
    "\057\040\046\041\054\043\047\044\051\047\050\051\052" +
    "\054\012\055\060\001\002\000\004\032\233\001\002\000" +
    "\030\003\061\012\055\032\057\040\046\041\054\043\047" +
    "\044\051\047\050\051\052\054\012\055\060\001\002\000" +
    "\032\003\061\012\055\031\235\032\057\040\046\041\054" +
    "\043\047\044\051\047\050\051\052\054\012\055\060\001" +
    "\002\000\056\003\uffb8\006\uffb8\012\uffb8\022\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\037\uffb8\040" +
    "\uffb8\041\uffb8\043\uffb8\044\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\055\uffb8\001\002\000\004\004" +
    "\237\001\002\000\056\003\uffb0\006\uffb0\012\uffb0\022\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\043\uffb0\044\uffb0\047\uffb0\050\uffb0" +
    "\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\001\002\000" +
    "\024\006\105\012\077\022\102\025\073\026\106\030\072" +
    "\037\107\040\046\050\104\001\002\000\004\027\242\001" +
    "\002\000\004\032\243\001\002\000\030\003\061\012\055" +
    "\032\057\040\046\041\054\043\047\044\051\047\050\051" +
    "\052\054\012\055\060\001\002\000\032\003\061\012\055" +
    "\031\245\032\057\040\046\041\054\043\047\044\051\047" +
    "\050\051\052\054\012\055\060\001\002\000\056\003\uffb9" +
    "\006\uffb9\012\uffb9\022\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\037\uffb9\040\uffb9\041\uffb9\043\uffb9" +
    "\044\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\001\002\000\046\004\uffc9\005\uffc9\006\uffc9" +
    "\007\uffc9\010\uffc9\011\uffc9\013\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\023\uffc9\024\uffc9\027\uffc9" +
    "\033\uffc9\035\uffc9\001\002\000\006\054\034\055\036\001" +
    "\002\000\004\032\251\001\002\000\030\003\061\012\055" +
    "\032\057\040\046\041\054\043\047\044\051\047\050\051" +
    "\052\054\012\055\060\001\002\000\032\003\061\012\055" +
    "\031\253\032\057\040\046\041\054\043\047\044\051\047" +
    "\050\051\052\054\012\055\060\001\002\000\012\002\uffaf" +
    "\046\uffaf\054\uffaf\055\uffaf\001\002\000\006\027\uffc3\035" +
    "\uffc3\001\002\000\004\012\256\001\002\000\004\030\257" +
    "\001\002\000\010\027\261\054\034\055\036\001\002\000" +
    "\006\027\265\035\247\001\002\000\004\032\262\001\002" +
    "\000\030\003\061\012\055\032\057\040\046\041\054\043" +
    "\047\044\051\047\050\051\052\054\012\055\060\001\002" +
    "\000\032\003\061\012\055\031\264\032\057\040\046\041" +
    "\054\043\047\044\051\047\050\051\052\054\012\055\060" +
    "\001\002\000\012\002\uffac\046\uffac\054\uffac\055\uffac\001" +
    "\002\000\004\032\266\001\002\000\030\003\061\012\055" +
    "\032\057\040\046\041\054\043\047\044\051\047\050\051" +
    "\052\054\012\055\060\001\002\000\032\003\061\012\055" +
    "\031\270\032\057\040\046\041\054\043\047\044\051\047" +
    "\050\051\052\054\012\055\060\001\002\000\012\002\uffad" +
    "\046\uffad\054\uffad\055\uffad\001\002\000\004\002\000\001" +
    "\002\000\012\002\uffff\046\uffff\054\uffff\055\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\016\002\005\003\004\005\013\021\012\022" +
    "\006\023\003\001\001\000\002\001\001\000\012\005\271" +
    "\021\012\022\006\023\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\024" +
    "\043\020\001\001\000\002\001\001\000\006\044\034\045" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\042\037\043\020\001\001\000\004\043\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\062\006\044\007\055\010\066\011\061\012\052\013\064" +
    "\020\063\021\043\037\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\017\070\024\235\026\100\030\077\032\075\033\107\034" +
    "\073\036\074\037\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\142\041\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\156\007\055\010\066\011\061\012\052\013\064" +
    "\020\063\021\043\037\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\017\070\024\102\026\100\030\077\032\075\033\107\034" +
    "\073\036\074\037\110\001\001\000\002\001\001\000\024" +
    "\017\070\024\154\026\100\030\077\032\075\033\107\034" +
    "\073\036\074\037\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\142\041\140\001\001\000\004\031\132\001\001\000\006" +
    "\025\116\027\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\070\032\111\033\107\034" +
    "\073\037\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\070\030\130\032\075\033\107\034\073\037\110" +
    "\001\001\000\020\017\070\026\127\030\077\032\075\033" +
    "\107\034\073\037\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\115\001\001\000\004\031\132\001\001\000" +
    "\002\001\001\000\014\017\070\032\136\033\107\034\073" +
    "\037\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\017\070\024\147" +
    "\026\100\030\077\032\075\033\107\034\073\036\074\037" +
    "\110\046\150\001\001\000\004\040\145\001\001\000\020" +
    "\017\070\026\143\030\077\032\075\033\107\034\073\037" +
    "\110\001\001\000\002\001\001\000\004\027\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\017\070\024\153" +
    "\026\100\030\077\032\075\033\107\034\073\036\074\037" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\162\006\044\007\055" +
    "\010\066\011\061\012\052\013\064\020\063\021\043\037" +
    "\065\001\001\000\024\006\156\007\055\010\066\011\061" +
    "\012\052\013\064\020\063\021\043\037\065\001\001\000" +
    "\002\001\001\000\006\042\024\043\020\001\001\000\002" +
    "\001\001\000\024\017\070\024\167\026\100\030\077\032" +
    "\075\033\107\034\073\036\074\037\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\172\006\044\007" +
    "\055\010\066\011\061\012\052\013\064\020\063\021\043" +
    "\037\065\001\001\000\024\006\156\007\055\010\066\011" +
    "\061\012\052\013\064\020\063\021\043\037\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\176\006" +
    "\044\007\055\010\066\011\061\012\052\013\064\020\063" +
    "\021\043\037\065\001\001\000\024\006\156\007\055\010" +
    "\066\011\061\012\052\013\064\020\063\021\043\037\065" +
    "\001\001\000\002\001\001\000\024\017\070\024\201\026" +
    "\100\030\077\032\075\033\107\034\073\036\074\037\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\204\015\205\001\001\000\006\015\216\016\215\001\001" +
    "\000\002\001\001\000\004\035\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\214\006\044\007\055\010\066\011\061\012" +
    "\052\013\064\020\063\021\043\037\065\001\001\000\024" +
    "\006\156\007\055\010\066\011\061\012\052\013\064\020" +
    "\063\021\043\037\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\221\006\044\007" +
    "\055\010\066\011\061\012\052\013\064\020\063\021\043" +
    "\037\065\001\001\000\024\006\156\007\055\010\066\011" +
    "\061\012\052\013\064\020\063\021\043\037\065\001\001" +
    "\000\002\001\001\000\026\004\224\006\044\007\055\010" +
    "\066\011\061\012\052\013\064\020\063\021\043\037\065" +
    "\001\001\000\044\006\156\007\055\010\066\011\061\012" +
    "\052\013\064\017\070\020\063\021\043\024\225\026\100" +
    "\030\077\032\075\033\107\034\073\036\074\037\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\230" +
    "\006\044\007\055\010\066\011\061\012\052\013\064\020" +
    "\063\021\043\037\065\001\001\000\024\006\156\007\055" +
    "\010\066\011\061\012\052\013\064\020\063\021\043\037" +
    "\065\001\001\000\002\001\001\000\026\004\233\006\044" +
    "\007\055\010\066\011\061\012\052\013\064\020\063\021" +
    "\043\037\065\001\001\000\024\006\156\007\055\010\066" +
    "\011\061\012\052\013\064\020\063\021\043\037\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\017\070\024\240\026\100\030\077\032\075\033" +
    "\107\034\073\036\074\037\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\243\006\044\007\055\010" +
    "\066\011\061\012\052\013\064\020\063\021\043\037\065" +
    "\001\001\000\024\006\156\007\055\010\066\011\061\012" +
    "\052\013\064\020\063\021\043\037\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\253\001\001\000" +
    "\002\001\001\000\026\004\251\006\044\007\055\010\066" +
    "\011\061\012\052\013\064\020\063\021\043\037\065\001" +
    "\001\000\024\006\156\007\055\010\066\011\061\012\052" +
    "\013\064\020\063\021\043\037\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\034\045\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\262\006\044\007\055\010\066" +
    "\011\061\012\052\013\064\020\063\021\043\037\065\001" +
    "\001\000\024\006\156\007\055\010\066\011\061\012\052" +
    "\013\064\020\063\021\043\037\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\266\006\044\007\055" +
    "\010\066\011\061\012\052\013\064\020\063\021\043\037" +
    "\065\001\001\000\024\006\156\007\055\010\066\011\061" +
    "\012\052\013\064\020\063\021\043\037\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static void main(String args[]) throws Exception {
        if (args.length == 2) {
            Application.setFile(args[1]);
            System.setIn(new FileInputStream(args[0]));
            new parser(new Yylex(System.in)).parse();
        }
    }

    public void report_error(String message, Object info) {

    }

    public void report_fatal_error(String message, Object info) {
        Application.notifyError(message + " " + info);
        //System.exit(1);
    }

    protected void report_expected_token_ids() {
        List<Integer> ids = expected_token_ids();
        ArrayList<String> list = new ArrayList<>();
        for (Integer expected : ids)
            list.add(symbl_name_from_id(expected));
        String msg = "Los tokens esperados son: " + list;
        Application.notifyError(msg);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= global_inst_block 
            {
              ParserNode RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Manager.init((GlobalBlockNode) block); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode start_val = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // global_inst_block ::= global_inst_block global_inst 
            {
              ParserNode RESULT =null;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode next = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode inst = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GlobalBlockNode((Declaration) inst, (GlobalBlockNode) next); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_inst_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // global_inst_block ::= global_inst 
            {
              ParserNode RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode inst = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new GlobalBlockNode((Declaration) inst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_inst_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inst_block ::= inst_block inst 
            {
              ParserNode RESULT =null;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode next = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode inst = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BlockNode(inst, (BlockNode) next); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inst_block ::= inst 
            {
              ParserNode RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode inst = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new BlockNode(inst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inst ::= ass_inst 
            {
              ParserNode RESULT =null;
		int assleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int assright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode ass = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ass; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inst ::= if_inst 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inst ::= loop_inst 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inst ::= foop_inst 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inst ::= switch_inst 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inst ::= return_inst 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inst ::= decl 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inst ::= error SEMI 
            {
              ParserNode RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken token = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Application.notifyError(Application.SYNTAX_MSG + " (" + token.m_line + ", " + token.m_col + ")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inst ::= error LB inst_block RB 
            {
              ParserNode RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Yytoken token = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Application.notifyError(Application.SYNTAX_MSG + Application.UNKNOWN_BLOCK_MSG + " (" + token.m_line + ", " + token.m_col + ")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // inst ::= LB error 
            {
              ParserNode RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken token = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Application.notifyError(Application.SYNTAX_MSG + Application.UNKNOWN_BLOCK_MSG + " (" + token.m_line + ", " + token.m_col + ")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // global_inst ::= decl 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // global_inst ::= func_decl 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // global_inst ::= proc_decl 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ass_inst ::= VAR ASS E0 SEMI 
            {
              ParserNode RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserNode var = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Yytoken token = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssNode(token, (VarReferenceNode) var, exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_inst",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E0 ::= E1 OP0 E1 
            {
              ParserNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode exp1 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode op = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp2 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(exp1, (OperatorNode) op, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E0",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E0 ::= E1 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E0",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E0 ::= STRING 
            {
              ParserNode RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken string = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringNode(string); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E0",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E0 ::= EPTR 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E0",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OP0 ::= EQ 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OP0 ::= NEQ 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OP0 ::= GT 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OP0 ::= GE 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OP0 ::= LT 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP0 ::= LE 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E1 ::= E1 OP1 E2 
            {
              ParserNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode exp1 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode op = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp2 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(exp1, (OperatorNode) op, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E1 ::= E2 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP1 ::= PLUS 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP1 ::= MINUS 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP1 ::= OR 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E2 ::= E2 OP2 E3 
            {
              ParserNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode exp1 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode op = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp2 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(exp1, (OperatorNode) op, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E2 ::= E3 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP2 ::= TIMES 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP2 ::= DIV 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP2 ::= MOD 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OP2 ::= AND 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E3 ::= OP3 E3 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode op = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpression((OperatorNode) op, exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E3 ::= E4 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP3 ::= NOT 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP3",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP3 ::= MINUS 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP3",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E4 ::= VAR 
            {
              ParserNode RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode var = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = var; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E4 ::= NUM 
            {
              ParserNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken num = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumNode(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E4 ::= BOOL 
            {
              ParserNode RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken bool = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolNode(bool); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E4 ::= LP E0 RP 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E4 ::= call_inst 
            {
              ParserNode RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode call = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = call; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ECONST ::= NUM 
            {
              ParserNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken num = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumNode(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ECONST",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ECONST ::= BOOL 
            {
              ParserNode RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken bool = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolNode(bool); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ECONST",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ECONST ::= STRING 
            {
              ParserNode RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken string = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringNode(string); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ECONST",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EPTR ::= ADDRESS ID 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarReferenceNode(id, new OperatorNode(op)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EPTR",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VAR ::= ID 
            {
              ParserNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarReferenceNode(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VAR ::= ID ARRAY_LIST 
            {
              ParserNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode arr = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarReferenceNode(id, (ArrayNode) arr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VAR ::= DEREFERENCE ID 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarReferenceNode(id, new OperatorNode(op)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VAR_LIST ::= VAR_LIST COMMA E0 
            {
              ParserNode RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode list = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarListNode(exp, (VarListNode) list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VAR_LIST ::= E0 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarListNode(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARRAY_LIST ::= ARRAY_LIST ARRAY 
            {
              ParserNode RESULT =null;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode next = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayNode(exp, (ArrayNode) next); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_LIST",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARRAY_LIST ::= ARRAY 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayNode(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_LIST",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARRAY ::= LBR E1 RBR 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARG_LIST ::= ARG_LIST COMMA ARG 
            {
              ParserNode RESULT =null;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode next = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode arg = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgumentListNode((ArgumentNode) arg, (ArgumentListNode) next); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG_LIST",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARG_LIST ::= ARG 
            {
              ParserNode RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode arg = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgumentListNode((ArgumentNode) arg); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG_LIST",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARG ::= TYPE ID STATIC_ARRAY_LIST 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode arr = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgumentNode(new TypeNode(type), new VarIDNode(id), (StaticArrayNode) arr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARG ::= TYPE ID 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgumentNode(new TypeNode(type), new VarIDNode(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARG ::= PTR TYPE ID 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgumentNode(new TypeNode(type), new VarIDNode(id), true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STATIC_ARRAY_LIST ::= STATIC_ARRAY_LIST STATIC_ARRAY 
            {
              ParserNode RESULT =null;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode next = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StaticArrayNode((NumNode) exp, (StaticArrayNode) next); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATIC_ARRAY_LIST",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // STATIC_ARRAY_LIST ::= STATIC_ARRAY 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StaticArrayNode((NumNode) exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATIC_ARRAY_LIST",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // STATIC_ARRAY ::= LBR NUM RBR 
            {
              ParserNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken num = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NumNode(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATIC_ARRAY",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if_inst ::= IF LP E0 RP LB inst_block RB 
            {
              ParserNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParserNode cond = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfNode(cond, block); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_inst",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if_inst ::= IF LP E0 RP LB inst_block RB ELSE LB inst_block RB 
            {
              ParserNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParserNode cond = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int block1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int block1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParserNode block1 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int block2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int block2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode block2 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfNode(cond, block1, block2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_inst",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // loop_inst ::= LOOP LP E0 RP LB inst_block RB 
            {
              ParserNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParserNode cond = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LoopNode(cond, block); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_inst",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // foop_inst ::= FOOP LP inst_block E0 SEMI inst_block RP LB inst_block RB 
            {
              ParserNode RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParserNode p1 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParserNode cond = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParserNode p2 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FoopNode(p1, cond, p2, block); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foop_inst",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // switch_inst ::= SWITCH LP E0 RP LB case_inst_list otherwise_inst RB 
            {
              ParserNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParserNode cond = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode cases = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defaultBlockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defaultBlockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode defaultBlock = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SwitchNode(cond, (CaseNode) cases, defaultBlock); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // case_inst_list ::= case_inst_list case_inst 
            {
              ParserNode RESULT =null;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode next = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode cases = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((CaseNode) cases).setNext((CaseNode)next); RESULT = cases; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_inst_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // case_inst_list ::= case_inst 
            {
              ParserNode RESULT =null;
		int casesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode cases = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cases; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_inst_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // case_inst ::= CASE ECONST THEN inst_block 
            {
              ParserNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode cond = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CaseNode(cond, block); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // otherwise_inst ::= OTHERWISE THEN inst_block 
            {
              ParserNode RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = block; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("otherwise_inst",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // call_inst ::= ID LP VAR_LIST RP 
            {
              ParserNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode list = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncCallNode(id, (VarListNode) list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // call_inst ::= ID LP RP 
            {
              ParserNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FuncCallNode(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // return_inst ::= RETURN E0 SEMI 
            {
              ParserNode RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode ret = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnNode(ret); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_inst",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // func_decl ::= TYPE ID LP ARG_LIST RP LB inst_block RB 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParserNode arg = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncDeclarationNode(id, new TypeNode(type), (ArgumentListNode) arg, (BlockNode) block, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // func_decl ::= TYPE ID LP RP LB inst_block RB 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncDeclarationNode(id, new TypeNode(type), (BlockNode) block, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // proc_decl ::= PROC TYPE ID LP ARG_LIST RP LB inst_block RB 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParserNode arg = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncDeclarationNode(id, new TypeNode(type), (ArgumentListNode) arg, (BlockNode) block, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // proc_decl ::= PROC TYPE ID LP RP LB inst_block RB 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncDeclarationNode(id, new TypeNode(type), (BlockNode) block, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_decl",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // decl ::= TYPE ID STATIC_ARRAY_LIST SEMI 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Yytoken var = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode arr = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclarationNode(new TypeNode(type), new VarIDNode(var), (StaticArrayNode) arr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // decl ::= TYPE ID SEMI 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken var = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclarationNode(new TypeNode(type), new VarIDNode(var)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // decl ::= PTR TYPE ID SEMI 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken var = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclarationNode(new TypeNode(type), new VarIDNode(var), true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
