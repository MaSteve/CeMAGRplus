
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cemagr;

import java_cup.runtime.*;
import java.io.FileInputStream;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\006\000\002\017\005\000\002" +
    "\017\003\000\002\017\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\021\005\000\002\021\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\005\000\002\023\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\025\004" +
    "\000\002\025\003\000\002\026\003\000\002\026\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\005\000\002\027\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\032\003\000\002\032\004" +
    "\000\002\041\005\000\002\041\003\000\002\034\004\000" +
    "\002\034\003\000\002\033\005\000\002\040\005\000\002" +
    "\040\003\000\002\037\005\000\002\037\004\000\002\035" +
    "\004\000\002\035\003\000\002\036\005\000\002\005\011" +
    "\000\002\005\015\000\002\006\011\000\002\007\014\000" +
    "\002\010\012\000\002\011\004\000\002\011\003\000\002" +
    "\012\006\000\002\013\005\000\002\014\006\000\002\014" +
    "\005\000\002\016\016\000\002\016\015\000\002\015\006" +
    "\000\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\020\012\020\035\015\037\006\040\024\041" +
    "\005\045\021\050\017\001\002\000\052\002\ufffa\006\ufffa" +
    "\012\ufffa\022\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\035\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa" +
    "\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\001\002\000" +
    "\004\050\201\001\002\000\004\030\173\001\002\000\052" +
    "\002\ufffd\006\ufffd\012\ufffd\022\ufffd\025\ufffd\026\ufffd\027" +
    "\ufffd\030\ufffd\031\ufffd\035\ufffd\037\ufffd\040\ufffd\041\ufffd" +
    "\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\001\002\000\052\002\ufffe\006\ufffe\012\ufffe\022\ufffe" +
    "\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\035\ufffe\037" +
    "\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\046\ufffe\047\ufffe\050\ufffe\001\002\000\052\002\uffff\006" +
    "\uffff\012\uffff\022\uffff\025\uffff\026\uffff\027\uffff\030\uffff" +
    "\031\uffff\035\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043" +
    "\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\001\002" +
    "\000\052\002\ufff8\006\ufff8\012\ufff8\022\ufff8\025\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\035\ufff8\037\ufff8\040\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\001\002\000\022\002\172\012\020\035\015" +
    "\037\006\040\024\041\005\045\021\050\017\001\002\000" +
    "\004\013\047\001\002\000\004\030\160\001\002\000\052" +
    "\002\ufffc\006\ufffc\012\ufffc\022\ufffc\025\ufffc\026\ufffc\027" +
    "\ufffc\030\ufffc\031\ufffc\035\ufffc\037\ufffc\040\ufffc\041\ufffc" +
    "\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050" +
    "\ufffc\001\002\000\004\012\147\001\002\000\046\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\023\uffd6" +
    "\024\uffd6\027\uffd6\030\141\033\uffd6\001\002\000\004\030" +
    "\116\001\002\000\052\002\ufff9\006\ufff9\012\ufff9\022\ufff9" +
    "\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\035\ufff9\037" +
    "\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9" +
    "\046\ufff9\047\ufff9\050\ufff9\001\002\000\052\002\ufffb\006" +
    "\ufffb\012\ufffb\022\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\035\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\001\002" +
    "\000\004\030\025\001\002\000\020\012\020\035\015\037" +
    "\006\040\024\041\005\045\021\050\017\001\002\000\036" +
    "\006\043\012\020\022\037\025\032\026\044\030\031\035" +
    "\015\037\006\040\024\041\005\042\033\044\042\045\021" +
    "\050\017\001\002\000\040\004\uffda\005\uffda\006\uffda\007" +
    "\uffda\010\uffda\011\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\020\uffda\021\uffda\023\uffda\024\uffda\027\uffda\001\002\000" +
    "\052\002\001\006\001\012\001\022\001\025\001\026\001" +
    "\027\001\030\001\031\001\035\001\037\001\040\001\041" +
    "\001\042\001\043\001\044\001\045\001\046\001\047\001" +
    "\050\001\001\002\000\022\006\043\012\020\022\037\025" +
    "\032\026\044\030\031\042\033\044\042\001\002\000\020" +
    "\006\uffe0\012\uffe0\022\uffe0\025\uffe0\026\uffe0\030\uffe0\042" +
    "\uffe0\001\002\000\004\030\105\001\002\000\040\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1" +
    "\027\uffe1\001\002\000\040\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\023\uffe7\024\uffe7\027\uffe7\001\002\000" +
    "\040\004\uffec\005\uffec\006\uffec\007\103\010\102\011\077" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\023" +
    "\101\024\uffec\027\uffec\001\002\000\040\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\023\uffdd\024\uffdd\027\uffdd" +
    "\001\002\000\030\004\ufff5\005\067\006\062\014\070\015" +
    "\066\016\072\017\065\020\073\021\071\024\074\027\ufff5" +
    "\001\002\000\004\004\054\001\002\000\006\004\ufff4\027" +
    "\ufff4\001\002\000\020\006\uffdf\012\uffdf\022\uffdf\025\uffdf" +
    "\026\uffdf\030\uffdf\042\uffdf\001\002\000\040\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\023\uffdc\024\uffdc\027" +
    "\uffdc\001\002\000\020\006\043\012\020\022\037\025\032" +
    "\026\044\030\031\042\033\001\002\000\040\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\011\uffde\013\047\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\023\uffde\024" +
    "\uffde\001\002\000\022\006\043\012\020\022\037\025\032" +
    "\026\044\030\031\042\033\044\042\001\002\000\040\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\023\uffde\024" +
    "\uffde\027\uffde\001\002\000\004\004\052\001\002\000\052" +
    "\002\ufff7\006\ufff7\012\ufff7\022\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\031\ufff7\035\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050" +
    "\ufff7\001\002\000\040\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\023\uffe2\024\uffe2\027\uffe2\001\002\000\020" +
    "\012\020\035\015\037\006\040\024\041\005\045\021\050" +
    "\017\001\002\000\022\012\020\027\056\035\015\037\006" +
    "\040\024\041\005\045\021\050\017\001\002\000\004\032" +
    "\057\001\002\000\020\012\020\035\015\037\006\040\024" +
    "\041\005\045\021\050\017\001\002\000\022\012\020\031" +
    "\061\035\015\037\006\040\024\041\005\045\021\050\017" +
    "\001\002\000\052\002\uffc5\006\uffc5\012\uffc5\022\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\035\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\001\002\000\020\006\uffea\012\uffea" +
    "\022\uffea\025\uffea\026\uffea\030\uffea\042\uffea\001\002\000" +
    "\020\006\043\012\020\022\037\025\032\026\044\030\031" +
    "\042\033\001\002\000\020\006\043\012\020\022\037\025" +
    "\032\026\044\030\031\042\033\001\002\000\020\006\ufff0" +
    "\012\ufff0\022\ufff0\025\ufff0\026\ufff0\030\ufff0\042\ufff0\001" +
    "\002\000\020\006\ufff2\012\ufff2\022\ufff2\025\ufff2\026\ufff2" +
    "\030\ufff2\042\ufff2\001\002\000\020\006\uffeb\012\uffeb\022" +
    "\uffeb\025\uffeb\026\uffeb\030\uffeb\042\uffeb\001\002\000\020" +
    "\006\ufff3\012\ufff3\022\ufff3\025\ufff3\026\ufff3\030\ufff3\042" +
    "\ufff3\001\002\000\020\006\uffee\012\uffee\022\uffee\025\uffee" +
    "\026\uffee\030\uffee\042\uffee\001\002\000\020\006\ufff1\012" +
    "\ufff1\022\ufff1\025\ufff1\026\ufff1\030\ufff1\042\ufff1\001\002" +
    "\000\020\006\uffef\012\uffef\022\uffef\025\uffef\026\uffef\030" +
    "\uffef\042\uffef\001\002\000\020\006\uffe9\012\uffe9\022\uffe9" +
    "\025\uffe9\026\uffe9\030\uffe9\042\uffe9\001\002\000\014\004" +
    "\ufff6\005\067\006\062\024\074\027\ufff6\001\002\000\040" +
    "\004\uffed\005\uffed\006\uffed\007\103\010\102\011\077\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\023\101" +
    "\024\uffed\027\uffed\001\002\000\020\006\uffe4\012\uffe4\022" +
    "\uffe4\025\uffe4\026\uffe4\030\uffe4\042\uffe4\001\002\000\020" +
    "\006\043\012\020\022\037\025\032\026\044\030\031\042" +
    "\033\001\002\000\020\006\uffe3\012\uffe3\022\uffe3\025\uffe3" +
    "\026\uffe3\030\uffe3\042\uffe3\001\002\000\020\006\uffe5\012" +
    "\uffe5\022\uffe5\025\uffe5\026\uffe5\030\uffe5\042\uffe5\001\002" +
    "\000\020\006\uffe6\012\uffe6\022\uffe6\025\uffe6\026\uffe6\030" +
    "\uffe6\042\uffe6\001\002\000\040\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\023\uffe8\024\uffe8\027\uffe8\001\002" +
    "\000\006\012\020\027\110\001\002\000\006\027\uffd3\033" +
    "\uffd3\001\002\000\006\027\112\033\111\001\002\000\040" +
    "\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\023\uffbe" +
    "\024\uffbe\027\uffbe\001\002\000\004\012\020\001\002\000" +
    "\040\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\023" +
    "\uffbf\024\uffbf\027\uffbf\001\002\000\006\027\uffd4\033\uffd4" +
    "\001\002\000\004\027\115\001\002\000\040\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb\027" +
    "\uffdb\001\002\000\022\006\043\012\020\022\037\025\032" +
    "\026\044\030\031\042\033\044\042\001\002\000\004\027" +
    "\120\001\002\000\004\032\121\001\002\000\004\046\124" +
    "\001\002\000\006\046\124\047\135\001\002\000\006\046" +
    "\uffc2\047\uffc2\001\002\000\010\022\125\026\127\044\126" +
    "\001\002\000\004\034\uffd9\001\002\000\004\034\uffd7\001" +
    "\002\000\004\034\uffd8\001\002\000\004\034\131\001\002" +
    "\000\020\012\020\035\015\037\006\040\024\041\005\045" +
    "\021\050\017\001\002\000\024\012\020\035\015\037\006" +
    "\040\024\041\005\045\021\046\uffc1\047\uffc1\050\017\001" +
    "\002\000\004\031\140\001\002\000\006\046\uffc3\047\uffc3" +
    "\001\002\000\004\034\136\001\002\000\020\012\020\035" +
    "\015\037\006\040\024\041\005\045\021\050\017\001\002" +
    "\000\022\012\020\031\uffc0\035\015\037\006\040\024\041" +
    "\005\045\021\050\017\001\002\000\052\002\uffc4\006\uffc4" +
    "\012\uffc4\022\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\035\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\001\002\000" +
    "\020\006\043\012\020\022\037\025\032\026\044\030\031" +
    "\042\033\001\002\000\046\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5\027\uffd5\030" +
    "\141\033\uffd5\001\002\000\046\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1\024\uffd1\027\uffd1" +
    "\030\uffd1\033\uffd1\001\002\000\046\004\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\023\uffd2\024\uffd2\027" +
    "\uffd2\030\uffd2\033\uffd2\001\002\000\012\005\067\006\062" +
    "\024\074\027\146\001\002\000\046\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024\uffd0\027" +
    "\uffd0\030\uffd0\033\uffd0\001\002\000\006\004\152\030\151" +
    "\001\002\000\012\004\uffca\027\uffca\030\uffca\033\uffca\001" +
    "\002\000\004\022\156\001\002\000\052\002\uffba\006\uffba" +
    "\012\uffba\022\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\035\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\001\002\000" +
    "\006\004\155\030\151\001\002\000\012\004\uffcb\027\uffcb" +
    "\030\uffcb\033\uffcb\001\002\000\052\002\uffbb\006\uffbb\012" +
    "\uffbb\022\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\035\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044" +
    "\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\001\002\000\004" +
    "\027\157\001\002\000\012\004\uffc9\027\uffc9\030\uffc9\033" +
    "\uffc9\001\002\000\022\006\043\012\020\022\037\025\032" +
    "\026\044\030\031\042\033\044\042\001\002\000\004\027" +
    "\162\001\002\000\004\032\163\001\002\000\020\012\020" +
    "\035\015\037\006\040\024\041\005\045\021\050\017\001" +
    "\002\000\022\012\020\031\165\035\015\037\006\040\024" +
    "\041\005\045\021\050\017\001\002\000\054\002\uffc8\006" +
    "\uffc8\012\uffc8\022\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\035\uffc8\036\166\037\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\001\002\000\004\032\167\001\002\000\020\012\020\035" +
    "\015\037\006\040\024\041\005\045\021\050\017\001\002" +
    "\000\022\012\020\031\171\035\015\037\006\040\024\041" +
    "\005\045\021\050\017\001\002\000\052\002\uffc7\006\uffc7" +
    "\012\uffc7\022\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\035\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\001\002\000" +
    "\004\002\000\001\002\000\022\006\043\012\020\022\037" +
    "\025\032\026\044\030\031\042\033\044\042\001\002\000" +
    "\004\027\175\001\002\000\004\032\176\001\002\000\020" +
    "\012\020\035\015\037\006\040\024\041\005\045\021\050" +
    "\017\001\002\000\022\012\020\031\200\035\015\037\006" +
    "\040\024\041\005\045\021\050\017\001\002\000\052\002" +
    "\uffc6\006\uffc6\012\uffc6\022\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\035\uffc6\037\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\001\002\000\004\042\202\001\002\000\004\030\203\001" +
    "\002\000\006\027\205\050\207\001\002\000\006\027\221" +
    "\033\220\001\002\000\004\032\212\001\002\000\006\027" +
    "\uffce\033\uffce\001\002\000\004\012\210\001\002\000\010" +
    "\027\uffcc\030\151\033\uffcc\001\002\000\010\027\uffcd\030" +
    "\151\033\uffcd\001\002\000\020\012\020\035\015\037\006" +
    "\040\024\041\005\045\021\050\017\001\002\000\022\012" +
    "\020\035\015\037\006\040\024\041\005\043\214\045\021" +
    "\050\017\001\002\000\022\006\043\012\020\022\037\025" +
    "\032\026\044\030\031\042\033\044\042\001\002\000\004" +
    "\004\216\001\002\000\004\031\217\001\002\000\052\002" +
    "\uffbc\006\uffbc\012\uffbc\022\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\035\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\001\002\000\004\050\207\001\002\000\004\032\222\001" +
    "\002\000\020\012\020\035\015\037\006\040\024\041\005" +
    "\045\021\050\017\001\002\000\022\012\020\035\015\037" +
    "\006\040\024\041\005\043\224\045\021\050\017\001\002" +
    "\000\022\006\043\012\020\022\037\025\032\026\044\030" +
    "\031\042\033\044\042\001\002\000\004\004\226\001\002" +
    "\000\004\031\227\001\002\000\052\002\uffbd\006\uffbd\012" +
    "\uffbd\022\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\035\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\001\002\000\006" +
    "\027\uffcf\033\uffcf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\026\002\012\003\010\004\007\005\006\006" +
    "\015\007\022\010\003\015\021\016\011\032\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\027\004\007\005\006\006\015\007" +
    "\022\010\003\015\021\016\011\032\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\142\034\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\002\025\003\010\004\007\005\006\006\015\007\022" +
    "\010\003\015\021\016\011\032\013\001\001\000\042\003" +
    "\027\004\007\005\006\006\015\007\022\010\003\014\026" +
    "\015\021\016\011\017\040\021\037\023\035\025\034\026" +
    "\044\027\033\032\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\014\026\017\113\021\037\023\035\025" +
    "\034\026\044\027\033\032\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\077\001\001\000\002\001\001\000\006\020\063" +
    "\022\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\026\025\052" +
    "\026\044\027\033\032\047\001\001\000\002\001\001\000" +
    "\022\014\026\017\050\021\037\023\035\025\034\026\044" +
    "\027\033\032\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\002\054" +
    "\003\010\004\007\005\006\006\015\007\022\010\003\015" +
    "\021\016\011\032\013\001\001\000\024\003\027\004\007" +
    "\005\006\006\015\007\022\010\003\015\021\016\011\032" +
    "\013\001\001\000\002\001\001\000\026\002\057\003\010" +
    "\004\007\005\006\006\015\007\022\010\003\015\021\016" +
    "\011\032\013\001\001\000\024\003\027\004\007\005\006" +
    "\006\015\007\022\010\003\015\021\016\011\032\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\026" +
    "\023\075\025\034\026\044\027\033\032\047\001\001\000" +
    "\020\014\026\021\074\023\035\025\034\026\044\027\033" +
    "\032\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\062\001\001\000\004\024\077\001\001\000\002\001\001" +
    "\000\014\014\026\025\103\026\044\027\033\032\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\105\041\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\014\026\017\116" +
    "\021\037\023\035\025\034\026\044\027\033\032\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\121" +
    "\012\122\001\001\000\006\012\133\013\132\001\001\000" +
    "\002\001\001\000\004\031\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\002\131\003\010\004\007\005\006\006\015\007\022" +
    "\010\003\015\021\016\011\032\013\001\001\000\024\003" +
    "\027\004\007\005\006\006\015\007\022\010\003\015\021" +
    "\016\011\032\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\136\003\010\004\007" +
    "\005\006\006\015\007\022\010\003\015\021\016\011\032" +
    "\013\001\001\000\024\003\027\004\007\005\006\006\015" +
    "\007\022\010\003\015\021\016\011\032\013\001\001\000" +
    "\002\001\001\000\020\014\026\021\144\023\035\025\034" +
    "\026\044\027\033\032\047\001\001\000\004\033\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\062" +
    "\001\001\000\002\001\001\000\006\035\152\036\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\014\026" +
    "\017\160\021\037\023\035\025\034\026\044\027\033\032" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\002\163\003\010\004\007\005\006\006\015\007\022\010" +
    "\003\015\021\016\011\032\013\001\001\000\024\003\027" +
    "\004\007\005\006\006\015\007\022\010\003\015\021\016" +
    "\011\032\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\002\167\003\010\004\007\005\006\006\015\007" +
    "\022\010\003\015\021\016\011\032\013\001\001\000\024" +
    "\003\027\004\007\005\006\006\015\007\022\010\003\015" +
    "\021\016\011\032\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\014\026\017\173\021\037\023\035\025" +
    "\034\026\044\027\033\032\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\176\003\010\004\007\005" +
    "\006\006\015\007\022\010\003\015\021\016\011\032\013" +
    "\001\001\000\024\003\027\004\007\005\006\006\015\007" +
    "\022\010\003\015\021\016\011\032\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\205\040\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\035\210\036" +
    "\147\001\001\000\004\036\153\001\001\000\026\002\212" +
    "\003\010\004\007\005\006\006\015\007\022\010\003\015" +
    "\021\016\011\032\013\001\001\000\024\003\027\004\007" +
    "\005\006\006\015\007\022\010\003\015\021\016\011\032" +
    "\013\001\001\000\022\014\026\017\214\021\037\023\035" +
    "\025\034\026\044\027\033\032\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\227" +
    "\001\001\000\002\001\001\000\026\002\222\003\010\004" +
    "\007\005\006\006\015\007\022\010\003\015\021\016\011" +
    "\032\013\001\001\000\024\003\027\004\007\005\006\006" +
    "\015\007\022\010\003\015\021\016\011\032\013\001\001" +
    "\000\022\014\026\017\224\021\037\023\035\025\034\026" +
    "\044\027\033\032\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
        System.setIn(new FileInputStream("cemagr/example.txt"));
		new parser(new Yylex(System.in)).parse();
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inst_block ::= inst_block inst 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inst_block EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode start_val = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inst_block ::= inst 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inst ::= ass_inst 
            {
              ParserNode RESULT =null;
		int assleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int assright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode ass = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ass; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inst ::= if_inst 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inst ::= loop_inst 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inst ::= foop_inst 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inst ::= switch_inst 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inst ::= decl 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inst ::= func_decl 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ass_inst ::= VAR ASS E0 SEMI 
            {
              ParserNode RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserNode var = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssNode((VarReferenceNode) var, exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_inst",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E0 ::= E1 OP0 E1 
            {
              ParserNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode exp1 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode op = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp2 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(exp1, (OperatorNode) op, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E0",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E0 ::= E1 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E0",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E0 ::= STRING 
            {
              ParserNode RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken string = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringNode(string); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E0",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OP0 ::= EQ 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OP0 ::= NEQ 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OP0 ::= GT 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OP0 ::= GE 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OP0 ::= LT 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OP0 ::= LE 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // E1 ::= E1 OP1 E2 
            {
              ParserNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode exp1 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode op = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp2 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(exp1, (OperatorNode) op, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E1 ::= E2 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OP1 ::= PLUS 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OP1 ::= MINUS 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OP1 ::= OR 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E2 ::= E2 OP2 E3 
            {
              ParserNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode exp1 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode op = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp2 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(exp1, (OperatorNode) op, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E2 ::= E3 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OP2 ::= TIMES 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OP2 ::= DIV 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP2 ::= MOD 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OP2 ::= AND 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E3 ::= OP3 E3 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode op = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpression((OperatorNode) op, exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E3 ::= E4 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP3 ::= NOT 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP3 ::= MINUS 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // E4 ::= VAR 
            {
              ParserNode RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode var = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = var; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E4 ::= NUM 
            {
              ParserNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken num = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumNode(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E4 ::= BOOL 
            {
              ParserNode RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken bool = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolNode(bool); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E4 ::= LP E0 RP 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E4 ::= call_inst 
            {
              ParserNode RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode call = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = call; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ECONST ::= NUM 
            {
              ParserNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken num = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumNode(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ECONST",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ECONST ::= BOOL 
            {
              ParserNode RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken bool = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolNode(bool); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ECONST",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ECONST ::= STRING 
            {
              ParserNode RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken string = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringNode(string); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ECONST",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VAR ::= VAR_NAME 
            {
              ParserNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarReferenceNode(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VAR ::= VAR_NAME ARRAY_LIST 
            {
              ParserNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode arr = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarReferenceNode(id, (ArrayNode) arr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VAR_LIST ::= VAR_LIST COMMA VAR 
            {
              ParserNode RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode list = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode var = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarListNode((VarReferenceNode) var, (VarListNode) list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VAR_LIST ::= VAR 
            {
              ParserNode RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode var = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarListNode((VarReferenceNode) var); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ARRAY_LIST ::= ARRAY_LIST ARRAY 
            {
              ParserNode RESULT =null;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode next = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayNode(exp, (ArrayNode) next); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_LIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARRAY_LIST ::= ARRAY 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayNode(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_LIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ARRAY ::= LP E1 RP 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ARG_LIST ::= ARG_LIST COMMA ARG 
            {
              ParserNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG_LIST",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARG_LIST ::= ARG 
            {
              ParserNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG_LIST",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARG ::= TYPE VAR_NAME STATIC_ARRAY_LIST 
            {
              ParserNode RESULT =null;
		 System.out.println("ARG_DECL_ARRAY"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARG ::= TYPE VAR_NAME 
            {
              ParserNode RESULT =null;
		 System.out.println("ARG_DECL"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // STATIC_ARRAY_LIST ::= STATIC_ARRAY_LIST STATIC_ARRAY 
            {
              ParserNode RESULT =null;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode next = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StaticArrayNode(exp, (StaticArrayNode) next); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATIC_ARRAY_LIST",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // STATIC_ARRAY_LIST ::= STATIC_ARRAY 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StaticArrayNode(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATIC_ARRAY_LIST",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // STATIC_ARRAY ::= LP NUM RP 
            {
              ParserNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken num = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NumNode(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATIC_ARRAY",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // if_inst ::= IF LP E0 RP LB inst_block RB 
            {
              ParserNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParserNode cond = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfNode(cond, block); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // if_inst ::= IF LP E0 RP LB inst_block RB ELSE LB inst_block RB 
            {
              ParserNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParserNode cond = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int block1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int block1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParserNode block1 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int block2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int block2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode block2 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfNode(cond, block1, block2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // loop_inst ::= LOOP LP E0 RP LB inst_block RB 
            {
              ParserNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParserNode cond = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LoopNode(cond, block); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_inst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // foop_inst ::= FOOP LP inst_block E0 SEMI inst_block RP LB inst_block RB 
            {
              ParserNode RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParserNode p1 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParserNode cond = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParserNode p2 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FoopNode(p1, cond, p2, block); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foop_inst",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // switch_inst ::= SWITCH LP E0 RP LB case_inst_list otherwise_inst RB 
            {
              ParserNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParserNode cond = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode cases = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defaultBlockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defaultBlockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode defaultBlock = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SwitchNode(cond, (CaseNode) cases, defaultBlock); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_inst",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // case_inst_list ::= case_inst_list case_inst 
            {
              ParserNode RESULT =null;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode next = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode cases = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((CaseNode) cases).setNext((CaseNode)next); RESULT = cases; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_inst_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // case_inst_list ::= case_inst 
            {
              ParserNode RESULT =null;
		int casesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode cases = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cases; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_inst_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // case_inst ::= CASE ECONST THEN inst_block 
            {
              ParserNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode cond = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CaseNode(cond, block); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_inst",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // otherwise_inst ::= OTHERWISE THEN inst_block 
            {
              ParserNode RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = block; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("otherwise_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // call_inst ::= FUNC_ID LP VAR_LIST RP 
            {
              ParserNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode list = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncCallNode(id, (VarListNode) list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_inst",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // call_inst ::= FUNC_ID LP RP 
            {
              ParserNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FuncCallNode(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_inst",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // func_decl ::= FUNC TYPE FUNC_ID LP ARG_LIST RP LB inst_block RETURN E0 SEMI RB 
            {
              ParserNode RESULT =null;
		 System.out.println("FUNC"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // func_decl ::= FUNC TYPE FUNC_ID LP RP LB inst_block RETURN E0 SEMI RB 
            {
              ParserNode RESULT =null;
		 System.out.println("FUNC"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // decl ::= TYPE VAR_NAME STATIC_ARRAY_LIST SEMI 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Yytoken var = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode arr = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclarationNode(new TypeNode(type), new VarIDNode(var), (StaticArrayNode) arr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // decl ::= TYPE VAR_NAME SEMI 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken var = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclarationNode(new TypeNode(type), new VarIDNode(var)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
