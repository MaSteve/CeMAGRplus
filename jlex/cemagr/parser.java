
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cemagr;

import java_cup.runtime.*;
import java.io.FileInputStream;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\005\003\000\002\005\003\000\002\007\006\000\002\022" +
    "\005\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\024\005\000\002\024\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\005\000\002\026\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\030\004\000\002\030\003\000\002" +
    "\031\003\000\002\031\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\005\000\002\032\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\034\004\000\002\035\003\000\002\035\004\000\002" +
    "\035\004\000\002\044\005\000\002\044\003\000\002\037" +
    "\004\000\002\037\003\000\002\036\005\000\002\043\005" +
    "\000\002\043\003\000\002\042\005\000\002\042\004\000" +
    "\002\042\005\000\002\040\004\000\002\040\003\000\002" +
    "\041\005\000\002\010\011\000\002\010\015\000\002\011" +
    "\011\000\002\012\014\000\002\013\012\000\002\014\004" +
    "\000\002\014\003\000\002\015\006\000\002\016\005\000" +
    "\002\017\006\000\002\017\005\000\002\021\016\000\002" +
    "\021\015\000\002\020\006\000\002\020\005\000\002\020" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\010\043\004\052\010\053\012\001\002\000" +
    "\004\053\032\001\002\000\012\002\ufff5\043\ufff5\052\ufff5" +
    "\053\ufff5\001\002\000\012\002\001\043\004\052\010\053" +
    "\012\001\002\000\012\002\ufffe\043\ufffe\052\ufffe\053\ufffe" +
    "\001\002\000\004\053\026\001\002\000\004\002\025\001" +
    "\002\000\004\012\014\001\002\000\012\002\ufff4\043\ufff4" +
    "\052\ufff4\053\ufff4\001\002\000\006\004\017\030\016\001" +
    "\002\000\012\004\uffc2\027\uffc2\030\uffc2\033\uffc2\001\002" +
    "\000\004\022\023\001\002\000\060\002\uffb2\006\uffb2\012" +
    "\uffb2\022\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\035\uffb2\036\uffb2\037\uffb2\041\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\001\002\000\006\004\022\030\016\001\002\000" +
    "\012\004\uffc3\027\uffc3\030\uffc3\033\uffc3\001\002\000\060" +
    "\002\uffb3\006\uffb3\012\uffb3\022\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\035\uffb3\036\uffb3\037\uffb3\041\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002\000\004\027\024" +
    "\001\002\000\012\004\uffc1\027\uffc1\030\uffc1\033\uffc1\001" +
    "\002\000\004\002\000\001\002\000\004\012\027\001\002" +
    "\000\004\004\030\001\002\000\060\002\uffb1\006\uffb1\012" +
    "\uffb1\022\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\001\002\000\012\002\uffff\043\uffff\052\uffff\053" +
    "\uffff\001\002\000\004\044\033\001\002\000\004\030\034" +
    "\001\002\000\010\027\036\052\037\053\041\001\002\000" +
    "\006\027\241\033\240\001\002\000\004\032\046\001\002" +
    "\000\004\053\044\001\002\000\006\027\uffc7\033\uffc7\001" +
    "\002\000\004\012\042\001\002\000\010\027\uffc5\030\016" +
    "\033\uffc5\001\002\000\010\027\uffc6\030\016\033\uffc6\001" +
    "\002\000\004\012\045\001\002\000\006\027\uffc4\033\uffc4" +
    "\001\002\000\022\012\061\036\050\037\057\041\052\042" +
    "\065\047\062\052\010\053\012\001\002\000\054\006\ufff7" +
    "\012\ufff7\022\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\035\ufff7\036\ufff7\037\ufff7\041\ufff7\042\ufff7\044\ufff7" +
    "\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053" +
    "\ufff7\001\002\000\004\012\237\001\002\000\054\006\ufffa" +
    "\012\ufffa\022\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\041\ufffa\042\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\001\002\000\004\030\231\001\002\000\054\006\ufffb" +
    "\012\ufffb\022\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031" +
    "\ufffb\035\ufffb\036\ufffb\037\ufffb\041\ufffb\042\ufffb\044\ufffb" +
    "\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053" +
    "\ufffb\001\002\000\054\006\ufffc\012\ufffc\022\ufffc\025\ufffc" +
    "\026\ufffc\027\ufffc\030\ufffc\031\ufffc\035\ufffc\036\ufffc\037" +
    "\ufffc\041\ufffc\042\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc" +
    "\050\ufffc\051\ufffc\052\ufffc\053\ufffc\001\002\000\004\013" +
    "\112\001\002\000\024\012\061\036\050\037\057\041\052" +
    "\042\065\045\225\047\062\052\010\053\012\001\002\000" +
    "\004\030\213\001\002\000\054\006\ufff9\012\ufff9\022\ufff9" +
    "\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\041\ufff9\042\ufff9\044\ufff9\045\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\001\002\000" +
    "\046\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\023\uffd0\024\uffd0\027\uffd0\030\205\033\uffd0\001\002" +
    "\000\004\030\162\001\002\000\054\006\ufff6\012\ufff6\022" +
    "\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\035\ufff6" +
    "\036\ufff6\037\ufff6\041\ufff6\042\ufff6\044\ufff6\045\ufff6\046" +
    "\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\001\002" +
    "\000\054\006\ufff8\012\ufff8\022\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\030\ufff8\031\ufff8\035\ufff8\036\ufff8\037\ufff8\041\ufff8" +
    "\042\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051" +
    "\ufff8\052\ufff8\053\ufff8\001\002\000\004\030\066\001\002" +
    "\000\022\012\061\036\050\037\057\041\052\042\065\047" +
    "\062\052\010\053\012\001\002\000\042\006\105\012\061" +
    "\022\102\025\073\026\107\030\072\035\106\036\050\037" +
    "\057\041\052\042\065\044\074\046\104\047\062\052\010" +
    "\053\012\001\002\000\040\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\023\uffd5\024\uffd5\027\uffd5\001\002\000" +
    "\054\006\ufffd\012\ufffd\022\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\035\ufffd\036\ufffd\037\ufffd\041\ufffd\042" +
    "\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd" +
    "\052\ufffd\053\ufffd\001\002\000\026\006\105\012\061\022" +
    "\102\025\073\026\107\030\072\035\106\036\050\044\074" +
    "\046\104\001\002\000\022\006\uffdb\012\uffdb\022\uffdb\025" +
    "\uffdb\026\uffdb\030\uffdb\036\uffdb\044\uffdb\001\002\000\004" +
    "\030\151\001\002\000\006\004\uffef\027\uffef\001\002\000" +
    "\040\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\023" +
    "\uffdc\024\uffdc\027\uffdc\001\002\000\040\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\023\uffe2\024\uffe2\027\uffe2" +
    "\001\002\000\040\004\uffe7\005\uffe7\006\uffe7\007\147\010" +
    "\146\011\143\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\023\145\024\uffe7\027\uffe7\001\002\000\030\004" +
    "\ufff1\005\133\006\126\014\134\015\132\016\136\017\131" +
    "\020\137\021\135\024\140\027\ufff1\001\002\000\040\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\023\uffd8\024" +
    "\uffd8\027\uffd8\001\002\000\004\004\120\001\002\000\006" +
    "\004\ufff0\027\ufff0\001\002\000\022\006\uffda\012\uffda\022" +
    "\uffda\025\uffda\026\uffda\030\uffda\036\uffda\044\uffda\001\002" +
    "\000\004\012\117\001\002\000\040\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7\027\uffd7\001" +
    "\002\000\022\006\105\012\061\022\102\025\073\026\107" +
    "\030\072\036\050\044\074\001\002\000\040\004\uffd9\005" +
    "\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\013\112\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9\024" +
    "\uffd9\001\002\000\026\006\105\012\061\022\102\025\073" +
    "\026\107\030\072\035\106\036\050\044\074\046\104\001" +
    "\002\000\004\004\115\001\002\000\040\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\011\uffd9\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9\027\uffd9" +
    "\001\002\000\054\006\ufff3\012\ufff3\022\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\041\ufff3\042\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050" +
    "\ufff3\051\ufff3\052\ufff3\053\ufff3\001\002\000\040\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\023\uffdd\024\uffdd" +
    "\027\uffdd\001\002\000\006\004\uffd1\027\uffd1\001\002\000" +
    "\022\012\061\036\050\037\057\041\052\042\065\047\062" +
    "\052\010\053\012\001\002\000\024\012\061\027\122\036" +
    "\050\037\057\041\052\042\065\047\062\052\010\053\012" +
    "\001\002\000\004\032\123\001\002\000\022\012\061\036" +
    "\050\037\057\041\052\042\065\047\062\052\010\053\012" +
    "\001\002\000\024\012\061\031\125\036\050\037\057\041" +
    "\052\042\065\047\062\052\010\053\012\001\002\000\054" +
    "\006\uffbd\012\uffbd\022\uffbd\025\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\035\uffbd\036\uffbd\037\uffbd\041\uffbd\042\uffbd" +
    "\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\001\002\000\022\006\uffe5\012\uffe5\022\uffe5" +
    "\025\uffe5\026\uffe5\030\uffe5\036\uffe5\044\uffe5\001\002\000" +
    "\022\006\105\012\061\022\102\025\073\026\107\030\072" +
    "\036\050\044\074\001\002\000\022\006\105\012\061\022" +
    "\102\025\073\026\107\030\072\036\050\044\074\001\002" +
    "\000\022\006\uffeb\012\uffeb\022\uffeb\025\uffeb\026\uffeb\030" +
    "\uffeb\036\uffeb\044\uffeb\001\002\000\022\006\uffed\012\uffed" +
    "\022\uffed\025\uffed\026\uffed\030\uffed\036\uffed\044\uffed\001" +
    "\002\000\022\006\uffe6\012\uffe6\022\uffe6\025\uffe6\026\uffe6" +
    "\030\uffe6\036\uffe6\044\uffe6\001\002\000\022\006\uffee\012" +
    "\uffee\022\uffee\025\uffee\026\uffee\030\uffee\036\uffee\044\uffee" +
    "\001\002\000\022\006\uffe9\012\uffe9\022\uffe9\025\uffe9\026" +
    "\uffe9\030\uffe9\036\uffe9\044\uffe9\001\002\000\022\006\uffec" +
    "\012\uffec\022\uffec\025\uffec\026\uffec\030\uffec\036\uffec\044" +
    "\uffec\001\002\000\022\006\uffea\012\uffea\022\uffea\025\uffea" +
    "\026\uffea\030\uffea\036\uffea\044\uffea\001\002\000\022\006" +
    "\uffe4\012\uffe4\022\uffe4\025\uffe4\026\uffe4\030\uffe4\036\uffe4" +
    "\044\uffe4\001\002\000\014\004\ufff2\005\133\006\126\024" +
    "\140\027\ufff2\001\002\000\040\004\uffe8\005\uffe8\006\uffe8" +
    "\007\147\010\146\011\143\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\023\145\024\uffe8\027\uffe8\001\002" +
    "\000\022\006\uffdf\012\uffdf\022\uffdf\025\uffdf\026\uffdf\030" +
    "\uffdf\036\uffdf\044\uffdf\001\002\000\022\006\105\012\061" +
    "\022\102\025\073\026\107\030\072\036\050\044\074\001" +
    "\002\000\022\006\uffde\012\uffde\022\uffde\025\uffde\026\uffde" +
    "\030\uffde\036\uffde\044\uffde\001\002\000\022\006\uffe0\012" +
    "\uffe0\022\uffe0\025\uffe0\026\uffe0\030\uffe0\036\uffe0\044\uffe0" +
    "\001\002\000\022\006\uffe1\012\uffe1\022\uffe1\025\uffe1\026" +
    "\uffe1\030\uffe1\036\uffe1\044\uffe1\001\002\000\040\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3\024\uffe3" +
    "\027\uffe3\001\002\000\010\012\061\027\154\036\050\001" +
    "\002\000\006\027\uffcc\033\uffcc\001\002\000\006\027\156" +
    "\033\155\001\002\000\040\004\uffb6\005\uffb6\006\uffb6\007" +
    "\uffb6\010\uffb6\011\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\023\uffb6\024\uffb6\027\uffb6\001\002\000" +
    "\006\012\061\036\050\001\002\000\040\004\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\010\uffb7\011\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\023\uffb7\024\uffb7\027\uffb7" +
    "\001\002\000\006\027\uffcd\033\uffcd\001\002\000\004\027" +
    "\161\001\002\000\040\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\011\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\023\uffd6\024\uffd6\027\uffd6\001\002\000\026" +
    "\006\105\012\061\022\102\025\073\026\107\030\072\035" +
    "\106\036\050\044\074\046\104\001\002\000\004\027\164" +
    "\001\002\000\004\032\165\001\002\000\004\050\170\001" +
    "\002\000\006\050\170\051\201\001\002\000\006\050\uffba" +
    "\051\uffba\001\002\000\010\022\171\026\173\046\172\001" +
    "\002\000\004\034\uffd4\001\002\000\004\034\uffd2\001\002" +
    "\000\004\034\uffd3\001\002\000\004\034\175\001\002\000" +
    "\022\012\061\036\050\037\057\041\052\042\065\047\062" +
    "\052\010\053\012\001\002\000\026\012\061\036\050\037" +
    "\057\041\052\042\065\047\062\050\uffb9\051\uffb9\052\010" +
    "\053\012\001\002\000\004\031\204\001\002\000\006\050" +
    "\uffbb\051\uffbb\001\002\000\004\034\202\001\002\000\022" +
    "\012\061\036\050\037\057\041\052\042\065\047\062\052" +
    "\010\053\012\001\002\000\024\012\061\031\uffb8\036\050" +
    "\037\057\041\052\042\065\047\062\052\010\053\012\001" +
    "\002\000\054\006\uffbc\012\uffbc\022\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\035\uffbc\036\uffbc\037\uffbc\041" +
    "\uffbc\042\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\001\002\000\022\006\105\012" +
    "\061\022\102\025\073\026\107\030\072\036\050\044\074" +
    "\001\002\000\046\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010" +
    "\uffcf\011\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\023\uffcf\024\uffcf\027\uffcf\030\205\033" +
    "\uffcf\001\002\000\046\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\010\uffca\011\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\023\uffca\024\uffca\027\uffca\030\uffca" +
    "\033\uffca\001\002\000\046\004\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\023\uffcb\024\uffcb\027\uffcb\030" +
    "\uffcb\033\uffcb\001\002\000\012\005\133\006\126\024\140" +
    "\027\212\001\002\000\046\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\023\uffc9\024\uffc9\027\uffc9\030" +
    "\uffc9\033\uffc9\001\002\000\026\006\105\012\061\022\102" +
    "\025\073\026\107\030\072\035\106\036\050\044\074\046" +
    "\104\001\002\000\004\027\215\001\002\000\004\032\216" +
    "\001\002\000\022\012\061\036\050\037\057\041\052\042" +
    "\065\047\062\052\010\053\012\001\002\000\024\012\061" +
    "\031\220\036\050\037\057\041\052\042\065\047\062\052" +
    "\010\053\012\001\002\000\056\006\uffc0\012\uffc0\022\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\221\041\uffc0\042\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\001" +
    "\002\000\004\032\222\001\002\000\022\012\061\036\050" +
    "\037\057\041\052\042\065\047\062\052\010\053\012\001" +
    "\002\000\024\012\061\031\224\036\050\037\057\041\052" +
    "\042\065\047\062\052\010\053\012\001\002\000\054\006" +
    "\uffbf\012\uffbf\022\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\035\uffbf\036\uffbf\037\uffbf\041\uffbf\042\uffbf\044" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf" +
    "\053\uffbf\001\002\000\026\006\105\012\061\022\102\025" +
    "\073\026\107\030\072\035\106\036\050\044\074\046\104" +
    "\001\002\000\004\004\227\001\002\000\004\031\230\001" +
    "\002\000\012\002\uffb4\043\uffb4\052\uffb4\053\uffb4\001\002" +
    "\000\026\006\105\012\061\022\102\025\073\026\107\030" +
    "\072\035\106\036\050\044\074\046\104\001\002\000\004" +
    "\027\233\001\002\000\004\032\234\001\002\000\022\012" +
    "\061\036\050\037\057\041\052\042\065\047\062\052\010" +
    "\053\012\001\002\000\024\012\061\031\236\036\050\037" +
    "\057\041\052\042\065\047\062\052\010\053\012\001\002" +
    "\000\054\006\uffbe\012\uffbe\022\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\035\uffbe\036\uffbe\037\uffbe\041\uffbe" +
    "\042\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\053\uffbe\001\002\000\044\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\010\uffce\011\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\023\uffce\024\uffce" +
    "\027\uffce\033\uffce\001\002\000\006\052\037\053\041\001" +
    "\002\000\004\032\242\001\002\000\022\012\061\036\050" +
    "\037\057\041\052\042\065\047\062\052\010\053\012\001" +
    "\002\000\024\012\061\036\050\037\057\041\052\042\065" +
    "\045\244\047\062\052\010\053\012\001\002\000\026\006" +
    "\105\012\061\022\102\025\073\026\107\030\072\035\106" +
    "\036\050\044\074\046\104\001\002\000\004\004\246\001" +
    "\002\000\004\031\247\001\002\000\012\002\uffb5\043\uffb5" +
    "\052\uffb5\053\uffb5\001\002\000\006\027\uffc8\033\uffc8\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\014\002\010\003\005\005\006\020\004\021" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\030\020\004\021\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\017\041\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\042\037\043\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\040\042" +
    "\041\014\001\001\000\004\041\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\055\006\053\007\052" +
    "\010\050\011\057\012\063\013\046\020\062\035\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\070\007\052\010\050\011\057" +
    "\012\063\013\046\020\062\035\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\036\206\037\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\066\006\053\007\052\010\050" +
    "\011\057\012\063\013\046\020\062\035\054\001\001\000" +
    "\042\006\070\007\052\010\050\011\057\012\063\013\046" +
    "\017\067\020\062\022\102\024\100\026\077\030\076\031" +
    "\107\032\075\034\074\035\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\017\067\022\157\024\100\026" +
    "\077\030\076\031\107\032\075\034\074\035\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\143\001\001" +
    "\000\006\023\127\025\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\067\030\115\031" +
    "\107\032\075\035\113\001\001\000\002\001\001\000\024" +
    "\017\067\022\112\024\100\026\077\030\076\031\107\032" +
    "\075\034\074\035\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\120\006\053\007\052\010\050\011\057" +
    "\012\063\013\046\020\062\035\054\001\001\000\022\006" +
    "\070\007\052\010\050\011\057\012\063\013\046\020\062" +
    "\035\054\001\001\000\002\001\001\000\024\004\123\006" +
    "\053\007\052\010\050\011\057\012\063\013\046\020\062" +
    "\035\054\001\001\000\022\006\070\007\052\010\050\011" +
    "\057\012\063\013\046\020\062\035\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\067\026\141\030" +
    "\076\031\107\032\075\035\113\001\001\000\020\017\067" +
    "\024\140\026\077\030\076\031\107\032\075\035\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\126\001\001" +
    "\000\004\027\143\001\001\000\002\001\001\000\014\017" +
    "\067\030\147\031\107\032\075\035\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\151\044\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\017\067\022\162\024\100\026" +
    "\077\030\076\031\107\032\075\034\074\035\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\165\015" +
    "\166\001\001\000\006\015\177\016\176\001\001\000\002" +
    "\001\001\000\004\033\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\175\006\053\007\052\010\050\011\057\012\063\013" +
    "\046\020\062\035\054\001\001\000\022\006\070\007\052" +
    "\010\050\011\057\012\063\013\046\020\062\035\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\202\006\053\007\052\010\050\011\057\012" +
    "\063\013\046\020\062\035\054\001\001\000\022\006\070" +
    "\007\052\010\050\011\057\012\063\013\046\020\062\035" +
    "\054\001\001\000\002\001\001\000\020\017\067\024\210" +
    "\026\077\030\076\031\107\032\075\035\113\001\001\000" +
    "\004\036\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\126\001\001\000\002\001\001\000\024\017" +
    "\067\022\213\024\100\026\077\030\076\031\107\032\075" +
    "\034\074\035\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\216\006\053\007\052\010\050\011\057" +
    "\012\063\013\046\020\062\035\054\001\001\000\022\006" +
    "\070\007\052\010\050\011\057\012\063\013\046\020\062" +
    "\035\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\222\006\053\007\052\010\050\011\057\012\063" +
    "\013\046\020\062\035\054\001\001\000\022\006\070\007" +
    "\052\010\050\011\057\012\063\013\046\020\062\035\054" +
    "\001\001\000\002\001\001\000\024\017\067\022\225\024" +
    "\100\026\077\030\076\031\107\032\075\034\074\035\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\017\067\022\231\024\100\026\077\030\076" +
    "\031\107\032\075\034\074\035\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\234\006\053\007\052" +
    "\010\050\011\057\012\063\013\046\020\062\035\054\001" +
    "\001\000\022\006\070\007\052\010\050\011\057\012\063" +
    "\013\046\020\062\035\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\247\001\001\000\002\001\001" +
    "\000\024\004\242\006\053\007\052\010\050\011\057\012" +
    "\063\013\046\020\062\035\054\001\001\000\022\006\070" +
    "\007\052\010\050\011\057\012\063\013\046\020\062\035" +
    "\054\001\001\000\024\017\067\022\244\024\100\026\077" +
    "\030\076\031\107\032\075\034\074\035\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
        System.setIn(new FileInputStream("cemagr/example.txt"));
		new parser(new Yylex(System.in)).parse();
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= global_inst_block 
            {
              ParserNode RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Manager.init((GlobalBlockNode) block); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode start_val = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // global_inst_block ::= global_inst_block global_inst 
            {
              ParserNode RESULT =null;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode next = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode inst = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GlobalBlockNode((Declaration) inst, (GlobalBlockNode) next); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_inst_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // global_inst_block ::= global_inst 
            {
              ParserNode RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode inst = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new GlobalBlockNode((Declaration) inst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_inst_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inst_block ::= inst_block inst 
            {
              ParserNode RESULT =null;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode next = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode inst = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BlockNode(inst, (BlockNode) next); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inst_block ::= inst 
            {
              ParserNode RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode inst = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new BlockNode(inst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst_block",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inst ::= ass_inst 
            {
              ParserNode RESULT =null;
		int assleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int assright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode ass = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ass; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inst ::= if_inst 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inst ::= loop_inst 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inst ::= foop_inst 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inst ::= switch_inst 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inst ::= decl 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // global_inst ::= decl 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // global_inst ::= func_decl 
            {
              ParserNode RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode node = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = node; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ass_inst ::= VAR ASS E0 SEMI 
            {
              ParserNode RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParserNode var = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Yytoken token = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssNode(token, (VarReferenceNode) var, exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_inst",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E0 ::= E1 OP0 E1 
            {
              ParserNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode exp1 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode op = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp2 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(exp1, (OperatorNode) op, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E0",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E0 ::= E1 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E0",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E0 ::= STRING 
            {
              ParserNode RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken string = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringNode(string); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E0",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E0 ::= EPTR 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E0",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OP0 ::= EQ 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OP0 ::= NEQ 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OP0 ::= GT 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OP0 ::= GE 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OP0 ::= LT 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OP0 ::= LE 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E1 ::= E1 OP1 E2 
            {
              ParserNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode exp1 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode op = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp2 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(exp1, (OperatorNode) op, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E1 ::= E2 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OP1 ::= PLUS 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OP1 ::= MINUS 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OP1 ::= OR 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E2 ::= E2 OP2 E3 
            {
              ParserNode RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode exp1 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode op = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp2 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(exp1, (OperatorNode) op, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E2 ::= E3 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OP2 ::= TIMES 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP2 ::= DIV 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP2 ::= MOD 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OP2 ::= AND 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E3 ::= OP3 E3 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode op = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpression((OperatorNode) op, exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E3 ::= E4 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP3 ::= NOT 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP3",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP3 ::= MINUS 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperatorNode(op); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP3",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E4 ::= VAR 
            {
              ParserNode RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode var = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = var; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E4 ::= NUM 
            {
              ParserNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken num = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumNode(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E4 ::= BOOL 
            {
              ParserNode RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken bool = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolNode(bool); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E4 ::= LP E0 RP 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E4 ::= call_inst 
            {
              ParserNode RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode call = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = call; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E4",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ECONST ::= NUM 
            {
              ParserNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken num = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumNode(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ECONST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ECONST ::= BOOL 
            {
              ParserNode RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken bool = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolNode(bool); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ECONST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ECONST ::= STRING 
            {
              ParserNode RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken string = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringNode(string); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ECONST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EPTR ::= ADDRESS VAR_NAME 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarReferenceNode(id, new OperatorNode(op)); /* TODO */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EPTR",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VAR ::= VAR_NAME 
            {
              ParserNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarReferenceNode(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VAR ::= VAR_NAME ARRAY_LIST 
            {
              ParserNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode arr = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarReferenceNode(id, (ArrayNode) arr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VAR ::= DEREFERENCE VAR_NAME 
            {
              ParserNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken op = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarReferenceNode(id, new OperatorNode(op)); /* TODO */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VAR_LIST ::= VAR_LIST COMMA VAR 
            {
              ParserNode RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode list = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode var = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarListNode((VarReferenceNode) var, (VarListNode) list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VAR_LIST ::= VAR 
            {
              ParserNode RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode var = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarListNode((VarReferenceNode) var); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_LIST",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARRAY_LIST ::= ARRAY_LIST ARRAY 
            {
              ParserNode RESULT =null;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode next = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayNode(exp, (ArrayNode) next); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_LIST",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARRAY_LIST ::= ARRAY 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayNode(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY_LIST",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARRAY ::= LP E1 RP 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARG_LIST ::= ARG_LIST COMMA ARG 
            {
              ParserNode RESULT =null;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode next = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode arg = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgumentListNode((ArgumentNode) arg, (ArgumentListNode) next); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG_LIST",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARG_LIST ::= ARG 
            {
              ParserNode RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode arg = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgumentListNode((ArgumentNode) arg); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG_LIST",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARG ::= TYPE VAR_NAME STATIC_ARRAY_LIST 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode arr = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgumentNode(new TypeNode(type), new VarIDNode(id), (StaticArrayNode) arr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARG ::= TYPE VAR_NAME 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgumentNode(new TypeNode(type), new VarIDNode(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARG ::= PTR TYPE VAR_NAME 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgumentNode(new TypeNode(type), new VarIDNode(id));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // STATIC_ARRAY_LIST ::= STATIC_ARRAY_LIST STATIC_ARRAY 
            {
              ParserNode RESULT =null;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode next = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StaticArrayNode(exp, (StaticArrayNode) next); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATIC_ARRAY_LIST",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // STATIC_ARRAY_LIST ::= STATIC_ARRAY 
            {
              ParserNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode exp = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StaticArrayNode(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATIC_ARRAY_LIST",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // STATIC_ARRAY ::= LP NUM RP 
            {
              ParserNode RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken num = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NumNode(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATIC_ARRAY",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // if_inst ::= IF LP E0 RP LB inst_block RB 
            {
              ParserNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParserNode cond = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfNode(cond, block); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_inst",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // if_inst ::= IF LP E0 RP LB inst_block RB ELSE LB inst_block RB 
            {
              ParserNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParserNode cond = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int block1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int block1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParserNode block1 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int block2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int block2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode block2 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfNode(cond, block1, block2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_inst",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // loop_inst ::= LOOP LP E0 RP LB inst_block RB 
            {
              ParserNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParserNode cond = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LoopNode(cond, block); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_inst",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // foop_inst ::= FOOP LP inst_block E0 SEMI inst_block RP LB inst_block RB 
            {
              ParserNode RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParserNode p1 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParserNode cond = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParserNode p2 = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FoopNode(p1, cond, p2, block); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foop_inst",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // switch_inst ::= SWITCH LP E0 RP LB case_inst_list otherwise_inst RB 
            {
              ParserNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParserNode cond = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode cases = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defaultBlockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defaultBlockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode defaultBlock = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SwitchNode(cond, (CaseNode) cases, defaultBlock); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_inst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // case_inst_list ::= case_inst_list case_inst 
            {
              ParserNode RESULT =null;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode next = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode cases = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((CaseNode) cases).setNext((CaseNode)next); RESULT = cases; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_inst_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // case_inst_list ::= case_inst 
            {
              ParserNode RESULT =null;
		int casesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode cases = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cases; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_inst_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // case_inst ::= CASE ECONST THEN inst_block 
            {
              ParserNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode cond = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CaseNode(cond, block); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_inst",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // otherwise_inst ::= OTHERWISE THEN inst_block 
            {
              ParserNode RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = block; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("otherwise_inst",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // call_inst ::= FUNC_ID LP VAR_LIST RP 
            {
              ParserNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode list = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FuncCallNode(id, (VarListNode) list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // call_inst ::= FUNC_ID LP RP 
            {
              ParserNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FuncCallNode(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_inst",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // func_decl ::= FUNC TYPE FUNC_ID LP ARG_LIST RP LB inst_block RETURN E0 SEMI RB 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParserNode arg = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode ret = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FuncDeclarationNode(id, new TypeNode(type), (ArgumentListNode) arg, (BlockNode) block, ret); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // func_decl ::= FUNC TYPE FUNC_ID LP RP LB inst_block RETURN E0 SEMI RB 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Yytoken id = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParserNode block = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParserNode ret = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FuncDeclarationNode(id, new TypeNode(type), (BlockNode) block, ret); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_decl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // decl ::= TYPE VAR_NAME STATIC_ARRAY_LIST SEMI 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Yytoken var = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParserNode arr = (ParserNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclarationNode(new TypeNode(type), new VarIDNode(var), (StaticArrayNode) arr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // decl ::= TYPE VAR_NAME SEMI 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken var = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclarationNode(new TypeNode(type), new VarIDNode(var)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // decl ::= PTR TYPE VAR_NAME SEMI 
            {
              ParserNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Yytoken type = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Yytoken var = (Yytoken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclarationNode(new TypeNode(type), new VarIDNode(var), true); /* TODO: Modify node in this case */ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
