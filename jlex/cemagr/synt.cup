package cemagr;
import java_cup.runtime.*;
import java.io.FileInputStream;
import java.util.List;
import java.util.ArrayList;

parser code {:
	public static void main(String args[]) throws Exception {
        System.setIn(new FileInputStream("cemagr/example.txt"));
		new parser(new Yylex(System.in)).parse();
	}

	public void report_error(String message, Object info) {

    }

    public void report_fatal_error(String message, Object info) {
       	Application.notifyError(message + " " + info);
        System.exit(1);
    }

    protected void report_expected_token_ids() {
    	List<Integer> ids = expected_token_ids();
        ArrayList<String> list = new ArrayList<>();
        for (Integer expected : ids)
        	list.add(symbl_name_from_id(expected));
        String msg = "Los tokens esperados son: " + list;
        Application.notifyError(msg);
    }

:}

terminal Yytoken SEMI, PLUS, MINUS, TIMES, DIV, MOD, VAR_NAME, ASS, EQ, NEQ, GT, GE, LT, LE, NUM;
terminal Yytoken AND, OR, NOT, BOOL;
terminal Yytoken RP, LP, RB, LB, COMMA, THEN, ADDRESS, DEREFERENCE;

non terminal ParserNode inicio, global_inst_block, inst_block, global_inst, inst, ass_inst, if_inst, loop_inst, foop_inst, switch_inst, case_inst_list, case_inst, otherwise_inst, call_inst, decl, func_decl;
terminal Yytoken IF, ELSE, LOOP, FOOP, FUNC, FUNC_ID, RETURN, STRING, SWITCH, CASE, OTHERWISE, PTR;
non terminal ParserNode E0, OP0, E1, OP1, E2, OP2, E3, OP3, E4, ECONST, EPTR;
non terminal ParserNode VAR, ARRAY, ARRAY_LIST, STATIC_ARRAY_LIST, STATIC_ARRAY, ARG, ARG_LIST, VAR_LIST;
terminal Yytoken TYPE;

precedence left PLUS, MINUS, OR;
precedence left TIMES, DIV, MOD, AND;
precedence left NOT;

inicio ::= global_inst_block:block {: Manager.init((GlobalBlockNode) block); :} ;

global_inst_block ::= global_inst_block:next global_inst:inst {: RESULT = new GlobalBlockNode((Declaration) inst, (GlobalBlockNode) next); :}
                    | global_inst:inst {:  RESULT = new GlobalBlockNode((Declaration) inst); :};

inst_block ::= inst_block:next inst:inst {: RESULT = new BlockNode(inst, (BlockNode) next); :}
             | inst:inst {:  RESULT = new BlockNode(inst); :};
inst ::= ass_inst:ass {: RESULT = ass; :}
       | if_inst:node {: RESULT = node; :}
       | loop_inst:node {: RESULT = node; :}
       | foop_inst:node {: RESULT = node; :}
       | switch_inst:node {: RESULT = node; :}
       | decl:node {: RESULT = node; :}
       | error SEMI:token {: Application.notifyError(Application.SYNTAX_MSG + " (" + token.m_line + ", " + token.m_col + ")"); :};

global_inst ::= decl:node {: RESULT = node; :}
              | func_decl:node {: RESULT = node; :};

ass_inst ::= VAR:var ASS:token E0:exp SEMI {: RESULT = new AssNode(token, (VarReferenceNode) var, exp); :};
E0 ::= E1:exp1 OP0:op E1:exp2 {: RESULT = new BinaryExpression(exp1, (OperatorNode) op, exp2); :}
     | E1:exp {: RESULT = exp; :}
     | STRING:string {: RESULT = new StringNode(string); :}
     | EPTR:exp {: RESULT = exp; :} ;
OP0 ::= EQ:op {: RESULT = new OperatorNode(op); :}
      | NEQ:op {: RESULT = new OperatorNode(op); :}
      | GT:op {: RESULT = new OperatorNode(op); :}
      | GE:op {: RESULT = new OperatorNode(op); :}
      | LT:op {: RESULT = new OperatorNode(op); :}
      | LE:op {: RESULT = new OperatorNode(op); :} ;
E1 ::= E1:exp1 OP1:op E2:exp2 {: RESULT = new BinaryExpression(exp1, (OperatorNode) op, exp2); :}
     | E2:exp {: RESULT = exp; :} ;
OP1 ::= PLUS:op {: RESULT = new OperatorNode(op); :}
      | MINUS:op {: RESULT = new OperatorNode(op); :}
      | OR:op {: RESULT = new OperatorNode(op); :} ;
E2 ::= E2:exp1 OP2:op E3:exp2 {: RESULT = new BinaryExpression(exp1, (OperatorNode) op, exp2); :}
     | E3:exp {: RESULT = exp; :} ;
OP2 ::= TIMES:op {: RESULT = new OperatorNode(op); :}
      | DIV:op {: RESULT = new OperatorNode(op); :}
      | MOD:op {: RESULT = new OperatorNode(op); :}
      | AND:op {: RESULT = new OperatorNode(op); :} ;
E3 ::= OP3:op E3:exp {: RESULT = new UnaryExpression((OperatorNode) op, exp); :}
     | E4:exp {: RESULT = exp; :} ;
OP3 ::= NOT:op {: RESULT = new OperatorNode(op); :}
      | MINUS:op {: RESULT = new OperatorNode(op); :};
E4 ::= VAR:var {: RESULT = var; :}
     | NUM:num {: RESULT = new NumNode(num); :}
     | BOOL:bool {: RESULT = new BoolNode(bool); :}
     | LP E0:exp RP {: RESULT = exp; :}
     | call_inst:call {: RESULT = call; :} ;
ECONST ::= NUM:num {: RESULT = new NumNode(num); :}
         | BOOL:bool {: RESULT = new BoolNode(bool); :}
         | STRING:string {: RESULT = new StringNode(string); :} ;

EPTR ::= ADDRESS:op VAR_NAME:id {: RESULT = new VarReferenceNode(id, new OperatorNode(op)); /* TODO */ :};

VAR ::= VAR_NAME:id {: RESULT = new VarReferenceNode(id); :}
      | VAR_NAME:id ARRAY_LIST:arr {: RESULT = new VarReferenceNode(id, (ArrayNode) arr); :}
      | DEREFERENCE:op VAR_NAME:id {: RESULT = new VarReferenceNode(id, new OperatorNode(op)); /* TODO */ :} ;

VAR_LIST ::= VAR_LIST:list COMMA E0:exp {: RESULT = new VarListNode(exp, (VarListNode) list); :}
           | E0:exp {: RESULT = new VarListNode(exp); :};

ARRAY_LIST ::= ARRAY_LIST:next ARRAY:exp {: RESULT = new ArrayNode(exp, (ArrayNode) next); :}
             | ARRAY:exp {: RESULT = new ArrayNode(exp); :} ;

ARRAY ::= LP E1:exp RP {: RESULT = exp; :};

ARG_LIST ::= ARG_LIST:next COMMA ARG:arg {: RESULT = new ArgumentListNode((ArgumentNode) arg, (ArgumentListNode) next); :}
           | ARG:arg {: RESULT = new ArgumentListNode((ArgumentNode) arg); :} ;

ARG ::= TYPE:type VAR_NAME:id STATIC_ARRAY_LIST:arr {: RESULT = new ArgumentNode(new TypeNode(type), new VarIDNode(id), (StaticArrayNode) arr); :}
      | TYPE:type VAR_NAME:id {: RESULT = new ArgumentNode(new TypeNode(type), new VarIDNode(id)); :}
      | PTR TYPE:type VAR_NAME:id {: RESULT = new ArgumentNode(new TypeNode(type), new VarIDNode(id), true);:} ;

STATIC_ARRAY_LIST ::= STATIC_ARRAY_LIST:next STATIC_ARRAY:exp {: RESULT = new StaticArrayNode((NumNode) exp, (StaticArrayNode) next); :}
                    | STATIC_ARRAY:exp {: RESULT = new StaticArrayNode((NumNode) exp); :} ;
STATIC_ARRAY ::= LP NUM:num RP {: RESULT = new NumNode(num); :};


if_inst ::= IF LP E0:cond RP LB inst_block:block RB {: RESULT = new IfNode(cond, block); :}
          | IF LP E0:cond RP LB inst_block:block1 RB ELSE LB inst_block:block2 RB {: RESULT = new IfNode(cond, block1, block2); :} ;

loop_inst ::= LOOP LP E0:cond RP LB inst_block:block RB {: RESULT = new LoopNode(cond, block); :} ;

foop_inst ::= FOOP LP inst_block:p1 E0:cond SEMI inst_block:p2 RP LB inst_block:block RB {: RESULT = new FoopNode(p1, cond, p2, block); :}  ;

switch_inst ::= SWITCH LP E0:cond RP LB case_inst_list:cases otherwise_inst:defaultBlock RB {: RESULT = new SwitchNode(cond, (CaseNode) cases, defaultBlock); :} ;

case_inst_list ::= case_inst_list:next case_inst:cases {: ((CaseNode) cases).setNext((CaseNode)next); RESULT = cases; :}
                 | case_inst:cases {: RESULT = cases; :} ;

case_inst ::= CASE ECONST:cond THEN inst_block:block {: RESULT = new CaseNode(cond, block); :} ;

otherwise_inst ::= OTHERWISE THEN inst_block:block {: RESULT = block; :} ;

call_inst ::= FUNC_ID:id LP VAR_LIST:list RP {: RESULT = new FuncCallNode(id, (VarListNode) list); :}
            | FUNC_ID:id LP RP {: RESULT = new FuncCallNode(id); :} ;

func_decl ::= FUNC TYPE:type FUNC_ID:id LP ARG_LIST:arg RP LB inst_block:block RETURN E0:ret SEMI RB {: RESULT = new FuncDeclarationNode(id, new TypeNode(type), (ArgumentListNode) arg, (BlockNode) block, ret); :}
            | FUNC TYPE:type FUNC_ID:id LP RP LB inst_block:block RETURN E0:ret SEMI RB {: RESULT = new FuncDeclarationNode(id, new TypeNode(type), (BlockNode) block, ret); :} ;

decl ::= TYPE:type VAR_NAME:var STATIC_ARRAY_LIST:arr SEMI {: RESULT = new DeclarationNode(new TypeNode(type), new VarIDNode(var), (StaticArrayNode) arr); :}
       | TYPE:type VAR_NAME:var SEMI {: RESULT = new DeclarationNode(new TypeNode(type), new VarIDNode(var)); :}
       | PTR TYPE:type VAR_NAME:var SEMI {: RESULT = new DeclarationNode(new TypeNode(type), new VarIDNode(var), true); /* TODO: Modify node in this case */ :} ;
