package cemagr;
import java_cup.runtime.*;
import java.io.FileInputStream;

parser code {:
	public static void main(String args[]) throws Exception {
        System.setIn(new FileInputStream("example.txt"));
		new parser(new Yylex(System.in)).parse();
	}
:}

terminal SEMI, PLUS, MINUS, TIMES, DIV, MOD, VAR_NAME, ASS, EQ, NEQ, GT, GE, LT, LE, NUM;
terminal AND, OR, NOT, BOOL;
terminal RP, LP, RB, LB, COMMA, THEN;

non terminal inst_block, inst, ass_inst, if_inst, loop_inst, foop_inst, switch_inst, case_inst_list, case_inst, otherwise_inst, call_inst, decl, func_decl;
terminal IF, ELSE, LOOP, FOOP, FUNC, FUNC_ID, RETURN, STRING, SWITCH, CASE, OTHERWISE;
non terminal E0, OP0, E1, OP1, E2, OP2, E3, OP3, E4, OP4, ECONST;
non terminal VAR, ARRAY, ARRAY_LIST, STATIC_ARRAY_LIST, STATIC_ARRAY, ARG, ARG_LIST, VAR_LIST;
terminal TYPE;

precedence left PLUS, MINUS, OR;
precedence left TIMES, DIV, MOD, AND;
precedence left NOT;

inst_block ::= inst_block inst | inst;
inst ::= ass_inst | if_inst | loop_inst | foop_inst | switch_inst | decl | func_decl;
ass_inst ::= VAR ASS E0 SEMI {: System.out.println("ASS"); :};
E0 ::= E1 OP0 E1 | E1 | STRING;
OP0 ::= EQ | NEQ | GT | GE | LT | LE ;
E1 ::= E1 OP1 E2 | E2 ;
OP1 ::= PLUS | MINUS | OR ;
E2 ::= E2 OP2 E3 | E3 ;
OP2 ::= TIMES | DIV | MOD | AND ;
E3 ::= OP3 E3 | E4;
OP3 ::= NOT | MINUS;
E4 ::= VAR | NUM | BOOL | LP E0 RP | call_inst ;
ECONST ::= NUM | BOOL | STRING ;

VAR ::= VAR_NAME | VAR_NAME ARRAY_LIST ;
VAR_LIST ::= VAR_LIST COMMA VAR | VAR ;
ARRAY_LIST ::= ARRAY_LIST ARRAY | ARRAY ;
ARRAY ::= LP E1 RP {: System.out.println("IDX"); :};
ARG_LIST ::= ARG_LIST COMMA ARG | ARG ;
ARG ::= TYPE VAR_NAME STATIC_ARRAY_LIST {: System.out.println("ARG_DECL_ARRAY"); :}
      | TYPE VAR_NAME {: System.out.println("ARG_DECL"); :} ;
STATIC_ARRAY_LIST ::= STATIC_ARRAY_LIST STATIC_ARRAY | STATIC_ARRAY ;
STATIC_ARRAY ::= LP NUM RP {: System.out.println("IDX_S"); :};


if_inst ::= IF LP E0 RP LB inst_block RB {: System.out.println("IF"); :}
            | IF LP E0 RP LB inst_block RB ELSE LB inst_block RB {: System.out.println("IFELSE"); :} ;

loop_inst ::= LOOP LP E0 RP LB inst_block RB {: System.out.println("LOOP"); :} ;

foop_inst ::= FOOP LP inst_block E0 SEMI inst_block RP LB inst_block RB {: System.out.println("FOOP"); :}  ;

switch_inst ::= SWITCH LP E0 RP LB case_inst_list otherwise_inst RB {: System.out.println("SWITCH"); :} ;

case_inst_list ::= case_inst_list case_inst | case_inst ;

case_inst ::= CASE ECONST THEN inst_block {: System.out.println("CASEX"); :} ;

otherwise_inst ::= OTHERWISE THEN inst_block {: System.out.println("OTHERWISE"); :} ;

call_inst ::= FUNC_ID LP VAR_LIST RP |
              FUNC_ID LP RP ;

func_decl ::= FUNC TYPE FUNC_ID LP ARG_LIST RP LB inst_block RETURN E0 SEMI RB {: System.out.println("FUNC"); :}
              | FUNC TYPE FUNC_ID LP RP LB inst_block RETURN E0 SEMI RB {: System.out.println("FUNC"); :} ;
decl ::= TYPE VAR_NAME STATIC_ARRAY_LIST SEMI {: System.out.println("DECL_ARRAY"); :}
       | TYPE VAR_NAME SEMI {: System.out.println("DECL"); :} ;